Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> anything_list
Rule 2     program -> <empty>
Rule 3     anything_list -> anything_list anything
Rule 4     anything_list -> anything
Rule 5     anything -> declaration
Rule 6     anything -> fundef
Rule 7     anything -> instruction
Rule 8     declarations -> declarations declaration
Rule 9     declarations -> declaration
Rule 10    declaration -> TYPE inits ;
Rule 11    declaration -> error ;
Rule 12    inits -> inits , init
Rule 13    inits -> init
Rule 14    init -> ID = expression
Rule 15    instruction -> print_instr
Rule 16    instruction -> labeled_instr
Rule 17    instruction -> assignment
Rule 18    instruction -> choice_instr
Rule 19    instruction -> while_instr
Rule 20    instruction -> repeat_instr
Rule 21    instruction -> return_instr
Rule 22    instruction -> break_instr
Rule 23    instruction -> continue_instr
Rule 24    instruction -> compound_instr
Rule 25    instruction -> expression ;
Rule 26    print_instr -> PRINT expr_list ;
Rule 27    print_instr -> PRINT error ;
Rule 28    labeled_instr -> ID : instruction
Rule 29    assignment -> ID = expression ;
Rule 30    choice_instr -> IF ( condition ) instruction
Rule 31    choice_instr -> IF ( condition ) instruction ELSE instruction
Rule 32    choice_instr -> IF ( error ) instruction
Rule 33    choice_instr -> IF ( error ) instruction ELSE instruction
Rule 34    while_instr -> WHILE ( condition ) instruction
Rule 35    while_instr -> WHILE ( error ) instruction
Rule 36    repeat_instr -> REPEAT anything_list UNTIL condition ;
Rule 37    return_instr -> RETURN expression ;
Rule 38    continue_instr -> CONTINUE ;
Rule 39    break_instr -> BREAK ;
Rule 40    compound_instr -> { anything_list }
Rule 41    condition -> expression
Rule 42    const -> INTEGER
Rule 43    const -> FLOAT
Rule 44    const -> STRING
Rule 45    expression -> const
Rule 46    expression -> ID
Rule 47    expression -> expression + expression
Rule 48    expression -> expression - expression
Rule 49    expression -> expression * expression
Rule 50    expression -> expression / expression
Rule 51    expression -> expression % expression
Rule 52    expression -> expression | expression
Rule 53    expression -> expression & expression
Rule 54    expression -> expression ^ expression
Rule 55    expression -> expression AND expression
Rule 56    expression -> expression OR expression
Rule 57    expression -> expression SHL expression
Rule 58    expression -> expression SHR expression
Rule 59    expression -> expression EQ expression
Rule 60    expression -> expression NEQ expression
Rule 61    expression -> expression > expression
Rule 62    expression -> expression < expression
Rule 63    expression -> expression LE expression
Rule 64    expression -> expression GE expression
Rule 65    expression -> ( expression )
Rule 66    expression -> ( error )
Rule 67    expression -> ID ( expr_list_or_empty )
Rule 68    expression -> ID ( error )
Rule 69    expr_list_or_empty -> expr_list
Rule 70    expr_list_or_empty -> <empty>
Rule 71    expr_list -> expr_list , expression
Rule 72    expr_list -> expression
Rule 73    fundef -> TYPE ID ( args_list_or_empty ) compound_instr
Rule 74    args_list_or_empty -> args_list
Rule 75    args_list_or_empty -> <empty>
Rule 76    args_list -> args_list , arg
Rule 77    args_list -> arg
Rule 78    arg -> TYPE ID

Terminals, with rules where they appear

%                    : 51
&                    : 53
(                    : 30 31 32 33 34 35 65 66 67 68 73
)                    : 30 31 32 33 34 35 65 66 67 68 73
*                    : 49
+                    : 47
,                    : 12 71 76
-                    : 48
/                    : 50
:                    : 28
;                    : 10 11 25 26 27 29 36 37 38 39
<                    : 62
=                    : 14 29
>                    : 61
AND                  : 55
BREAK                : 39
CONTINUE             : 38
ELSE                 : 31 33
EQ                   : 59
FLOAT                : 43
GE                   : 64
ID                   : 14 28 29 46 67 68 73 78
IF                   : 30 31 32 33
INTEGER              : 42
LE                   : 63
NEQ                  : 60
OR                   : 56
PRINT                : 26 27
REPEAT               : 36
RETURN               : 37
SHL                  : 57
SHR                  : 58
STRING               : 44
TYPE                 : 10 73 78
UNTIL                : 36
WHILE                : 34 35
^                    : 54
error                : 11 27 32 33 35 66 68
{                    : 40
|                    : 52
}                    : 40

Nonterminals, with rules where they appear

anything             : 3 4
anything_list        : 1 3 36 40
arg                  : 76 77
args_list            : 74 76
args_list_or_empty   : 73
assignment           : 17
break_instr          : 22
choice_instr         : 18
compound_instr       : 24 73
condition            : 30 31 34 36
const                : 45
continue_instr       : 23
declaration          : 5 8 9
declarations         : 8
expr_list            : 26 69 71
expr_list_or_empty   : 67
expression           : 14 25 29 37 41 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 71 72
fundef               : 6
init                 : 12 13
inits                : 10 12
instruction          : 7 28 30 31 31 32 33 33 34 35
labeled_instr        : 16
print_instr          : 15
program              : 0
repeat_instr         : 20
return_instr         : 21
while_instr          : 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . anything_list
    (2) program -> .
    (3) anything_list -> . anything_list anything
    (4) anything_list -> . anything
    (5) anything -> . declaration
    (6) anything -> . fundef
    (7) anything -> . instruction
    (10) declaration -> . TYPE inits ;
    (11) declaration -> . error ;
    (73) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    $end            reduce using rule 2 (program -> .)
    TYPE            shift and go to state 33
    error           shift and go to state 31
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    program                        shift and go to state 12
    assignment                     shift and go to state 17
    labeled_instr                  shift and go to state 18
    compound_instr                 shift and go to state 19
    declaration                    shift and go to state 20
    anything                       shift and go to state 23
    break_instr                    shift and go to state 24
    instruction                    shift and go to state 25
    fundef                         shift and go to state 26
    anything_list                  shift and go to state 27
    print_instr                    shift and go to state 28
    expression                     shift and go to state 30

state 1

    (43) const -> FLOAT .

    ;               reduce using rule 43 (const -> FLOAT .)
    +               reduce using rule 43 (const -> FLOAT .)
    -               reduce using rule 43 (const -> FLOAT .)
    *               reduce using rule 43 (const -> FLOAT .)
    /               reduce using rule 43 (const -> FLOAT .)
    %               reduce using rule 43 (const -> FLOAT .)
    |               reduce using rule 43 (const -> FLOAT .)
    &               reduce using rule 43 (const -> FLOAT .)
    ^               reduce using rule 43 (const -> FLOAT .)
    AND             reduce using rule 43 (const -> FLOAT .)
    OR              reduce using rule 43 (const -> FLOAT .)
    SHL             reduce using rule 43 (const -> FLOAT .)
    SHR             reduce using rule 43 (const -> FLOAT .)
    EQ              reduce using rule 43 (const -> FLOAT .)
    NEQ             reduce using rule 43 (const -> FLOAT .)
    >               reduce using rule 43 (const -> FLOAT .)
    <               reduce using rule 43 (const -> FLOAT .)
    LE              reduce using rule 43 (const -> FLOAT .)
    GE              reduce using rule 43 (const -> FLOAT .)
    ,               reduce using rule 43 (const -> FLOAT .)
    )               reduce using rule 43 (const -> FLOAT .)


state 2

    (37) return_instr -> RETURN . expression ;
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 35

state 3

    (18) instruction -> choice_instr .

    TYPE            reduce using rule 18 (instruction -> choice_instr .)
    error           reduce using rule 18 (instruction -> choice_instr .)
    PRINT           reduce using rule 18 (instruction -> choice_instr .)
    ID              reduce using rule 18 (instruction -> choice_instr .)
    IF              reduce using rule 18 (instruction -> choice_instr .)
    WHILE           reduce using rule 18 (instruction -> choice_instr .)
    REPEAT          reduce using rule 18 (instruction -> choice_instr .)
    RETURN          reduce using rule 18 (instruction -> choice_instr .)
    BREAK           reduce using rule 18 (instruction -> choice_instr .)
    CONTINUE        reduce using rule 18 (instruction -> choice_instr .)
    {               reduce using rule 18 (instruction -> choice_instr .)
    (               reduce using rule 18 (instruction -> choice_instr .)
    INTEGER         reduce using rule 18 (instruction -> choice_instr .)
    FLOAT           reduce using rule 18 (instruction -> choice_instr .)
    STRING          reduce using rule 18 (instruction -> choice_instr .)
    $end            reduce using rule 18 (instruction -> choice_instr .)
    UNTIL           reduce using rule 18 (instruction -> choice_instr .)
    }               reduce using rule 18 (instruction -> choice_instr .)
    ELSE            reduce using rule 18 (instruction -> choice_instr .)


state 4

    (26) print_instr -> PRINT . expr_list ;
    (27) print_instr -> PRINT . error ;
    (71) expr_list -> . expr_list , expression
    (72) expr_list -> . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    error           shift and go to state 37
    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    expr_list                      shift and go to state 36
    expression                     shift and go to state 38
    const                          shift and go to state 8

state 5

    (34) while_instr -> WHILE . ( condition ) instruction
    (35) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 39


state 6

    (20) instruction -> repeat_instr .

    TYPE            reduce using rule 20 (instruction -> repeat_instr .)
    error           reduce using rule 20 (instruction -> repeat_instr .)
    PRINT           reduce using rule 20 (instruction -> repeat_instr .)
    ID              reduce using rule 20 (instruction -> repeat_instr .)
    IF              reduce using rule 20 (instruction -> repeat_instr .)
    WHILE           reduce using rule 20 (instruction -> repeat_instr .)
    REPEAT          reduce using rule 20 (instruction -> repeat_instr .)
    RETURN          reduce using rule 20 (instruction -> repeat_instr .)
    BREAK           reduce using rule 20 (instruction -> repeat_instr .)
    CONTINUE        reduce using rule 20 (instruction -> repeat_instr .)
    {               reduce using rule 20 (instruction -> repeat_instr .)
    (               reduce using rule 20 (instruction -> repeat_instr .)
    INTEGER         reduce using rule 20 (instruction -> repeat_instr .)
    FLOAT           reduce using rule 20 (instruction -> repeat_instr .)
    STRING          reduce using rule 20 (instruction -> repeat_instr .)
    $end            reduce using rule 20 (instruction -> repeat_instr .)
    UNTIL           reduce using rule 20 (instruction -> repeat_instr .)
    }               reduce using rule 20 (instruction -> repeat_instr .)
    ELSE            reduce using rule 20 (instruction -> repeat_instr .)


state 7

    (21) instruction -> return_instr .

    TYPE            reduce using rule 21 (instruction -> return_instr .)
    error           reduce using rule 21 (instruction -> return_instr .)
    PRINT           reduce using rule 21 (instruction -> return_instr .)
    ID              reduce using rule 21 (instruction -> return_instr .)
    IF              reduce using rule 21 (instruction -> return_instr .)
    WHILE           reduce using rule 21 (instruction -> return_instr .)
    REPEAT          reduce using rule 21 (instruction -> return_instr .)
    RETURN          reduce using rule 21 (instruction -> return_instr .)
    BREAK           reduce using rule 21 (instruction -> return_instr .)
    CONTINUE        reduce using rule 21 (instruction -> return_instr .)
    {               reduce using rule 21 (instruction -> return_instr .)
    (               reduce using rule 21 (instruction -> return_instr .)
    INTEGER         reduce using rule 21 (instruction -> return_instr .)
    FLOAT           reduce using rule 21 (instruction -> return_instr .)
    STRING          reduce using rule 21 (instruction -> return_instr .)
    $end            reduce using rule 21 (instruction -> return_instr .)
    UNTIL           reduce using rule 21 (instruction -> return_instr .)
    }               reduce using rule 21 (instruction -> return_instr .)
    ELSE            reduce using rule 21 (instruction -> return_instr .)


state 8

    (45) expression -> const .

    +               reduce using rule 45 (expression -> const .)
    -               reduce using rule 45 (expression -> const .)
    *               reduce using rule 45 (expression -> const .)
    /               reduce using rule 45 (expression -> const .)
    %               reduce using rule 45 (expression -> const .)
    |               reduce using rule 45 (expression -> const .)
    &               reduce using rule 45 (expression -> const .)
    ^               reduce using rule 45 (expression -> const .)
    AND             reduce using rule 45 (expression -> const .)
    OR              reduce using rule 45 (expression -> const .)
    SHL             reduce using rule 45 (expression -> const .)
    SHR             reduce using rule 45 (expression -> const .)
    EQ              reduce using rule 45 (expression -> const .)
    NEQ             reduce using rule 45 (expression -> const .)
    >               reduce using rule 45 (expression -> const .)
    <               reduce using rule 45 (expression -> const .)
    LE              reduce using rule 45 (expression -> const .)
    GE              reduce using rule 45 (expression -> const .)
    ;               reduce using rule 45 (expression -> const .)
    ,               reduce using rule 45 (expression -> const .)
    )               reduce using rule 45 (expression -> const .)


state 9

    (65) expression -> ( . expression )
    (66) expression -> ( . error )
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    error           shift and go to state 40
    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 41

state 10

    (23) instruction -> continue_instr .

    TYPE            reduce using rule 23 (instruction -> continue_instr .)
    error           reduce using rule 23 (instruction -> continue_instr .)
    PRINT           reduce using rule 23 (instruction -> continue_instr .)
    ID              reduce using rule 23 (instruction -> continue_instr .)
    IF              reduce using rule 23 (instruction -> continue_instr .)
    WHILE           reduce using rule 23 (instruction -> continue_instr .)
    REPEAT          reduce using rule 23 (instruction -> continue_instr .)
    RETURN          reduce using rule 23 (instruction -> continue_instr .)
    BREAK           reduce using rule 23 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 23 (instruction -> continue_instr .)
    {               reduce using rule 23 (instruction -> continue_instr .)
    (               reduce using rule 23 (instruction -> continue_instr .)
    INTEGER         reduce using rule 23 (instruction -> continue_instr .)
    FLOAT           reduce using rule 23 (instruction -> continue_instr .)
    STRING          reduce using rule 23 (instruction -> continue_instr .)
    $end            reduce using rule 23 (instruction -> continue_instr .)
    UNTIL           reduce using rule 23 (instruction -> continue_instr .)
    }               reduce using rule 23 (instruction -> continue_instr .)
    ELSE            reduce using rule 23 (instruction -> continue_instr .)


state 11

    (19) instruction -> while_instr .

    TYPE            reduce using rule 19 (instruction -> while_instr .)
    error           reduce using rule 19 (instruction -> while_instr .)
    PRINT           reduce using rule 19 (instruction -> while_instr .)
    ID              reduce using rule 19 (instruction -> while_instr .)
    IF              reduce using rule 19 (instruction -> while_instr .)
    WHILE           reduce using rule 19 (instruction -> while_instr .)
    REPEAT          reduce using rule 19 (instruction -> while_instr .)
    RETURN          reduce using rule 19 (instruction -> while_instr .)
    BREAK           reduce using rule 19 (instruction -> while_instr .)
    CONTINUE        reduce using rule 19 (instruction -> while_instr .)
    {               reduce using rule 19 (instruction -> while_instr .)
    (               reduce using rule 19 (instruction -> while_instr .)
    INTEGER         reduce using rule 19 (instruction -> while_instr .)
    FLOAT           reduce using rule 19 (instruction -> while_instr .)
    STRING          reduce using rule 19 (instruction -> while_instr .)
    $end            reduce using rule 19 (instruction -> while_instr .)
    UNTIL           reduce using rule 19 (instruction -> while_instr .)
    }               reduce using rule 19 (instruction -> while_instr .)
    ELSE            reduce using rule 19 (instruction -> while_instr .)


state 12

    (0) S' -> program .



state 13

    (42) const -> INTEGER .

    ;               reduce using rule 42 (const -> INTEGER .)
    +               reduce using rule 42 (const -> INTEGER .)
    -               reduce using rule 42 (const -> INTEGER .)
    *               reduce using rule 42 (const -> INTEGER .)
    /               reduce using rule 42 (const -> INTEGER .)
    %               reduce using rule 42 (const -> INTEGER .)
    |               reduce using rule 42 (const -> INTEGER .)
    &               reduce using rule 42 (const -> INTEGER .)
    ^               reduce using rule 42 (const -> INTEGER .)
    AND             reduce using rule 42 (const -> INTEGER .)
    OR              reduce using rule 42 (const -> INTEGER .)
    SHL             reduce using rule 42 (const -> INTEGER .)
    SHR             reduce using rule 42 (const -> INTEGER .)
    EQ              reduce using rule 42 (const -> INTEGER .)
    NEQ             reduce using rule 42 (const -> INTEGER .)
    >               reduce using rule 42 (const -> INTEGER .)
    <               reduce using rule 42 (const -> INTEGER .)
    LE              reduce using rule 42 (const -> INTEGER .)
    GE              reduce using rule 42 (const -> INTEGER .)
    ,               reduce using rule 42 (const -> INTEGER .)
    )               reduce using rule 42 (const -> INTEGER .)


state 14

    (39) break_instr -> BREAK . ;

    ;               shift and go to state 42


state 15

    (36) repeat_instr -> REPEAT . anything_list UNTIL condition ;
    (3) anything_list -> . anything_list anything
    (4) anything_list -> . anything
    (5) anything -> . declaration
    (6) anything -> . fundef
    (7) anything -> . instruction
    (10) declaration -> . TYPE inits ;
    (11) declaration -> . error ;
    (73) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    TYPE            shift and go to state 33
    error           shift and go to state 31
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    assignment                     shift and go to state 17
    labeled_instr                  shift and go to state 18
    compound_instr                 shift and go to state 19
    declaration                    shift and go to state 20
    anything                       shift and go to state 23
    break_instr                    shift and go to state 24
    instruction                    shift and go to state 25
    fundef                         shift and go to state 26
    anything_list                  shift and go to state 43
    print_instr                    shift and go to state 28
    expression                     shift and go to state 30

state 16

    (44) const -> STRING .

    ;               reduce using rule 44 (const -> STRING .)
    +               reduce using rule 44 (const -> STRING .)
    -               reduce using rule 44 (const -> STRING .)
    *               reduce using rule 44 (const -> STRING .)
    /               reduce using rule 44 (const -> STRING .)
    %               reduce using rule 44 (const -> STRING .)
    |               reduce using rule 44 (const -> STRING .)
    &               reduce using rule 44 (const -> STRING .)
    ^               reduce using rule 44 (const -> STRING .)
    AND             reduce using rule 44 (const -> STRING .)
    OR              reduce using rule 44 (const -> STRING .)
    SHL             reduce using rule 44 (const -> STRING .)
    SHR             reduce using rule 44 (const -> STRING .)
    EQ              reduce using rule 44 (const -> STRING .)
    NEQ             reduce using rule 44 (const -> STRING .)
    >               reduce using rule 44 (const -> STRING .)
    <               reduce using rule 44 (const -> STRING .)
    LE              reduce using rule 44 (const -> STRING .)
    GE              reduce using rule 44 (const -> STRING .)
    ,               reduce using rule 44 (const -> STRING .)
    )               reduce using rule 44 (const -> STRING .)


state 17

    (17) instruction -> assignment .

    TYPE            reduce using rule 17 (instruction -> assignment .)
    error           reduce using rule 17 (instruction -> assignment .)
    PRINT           reduce using rule 17 (instruction -> assignment .)
    ID              reduce using rule 17 (instruction -> assignment .)
    IF              reduce using rule 17 (instruction -> assignment .)
    WHILE           reduce using rule 17 (instruction -> assignment .)
    REPEAT          reduce using rule 17 (instruction -> assignment .)
    RETURN          reduce using rule 17 (instruction -> assignment .)
    BREAK           reduce using rule 17 (instruction -> assignment .)
    CONTINUE        reduce using rule 17 (instruction -> assignment .)
    {               reduce using rule 17 (instruction -> assignment .)
    (               reduce using rule 17 (instruction -> assignment .)
    INTEGER         reduce using rule 17 (instruction -> assignment .)
    FLOAT           reduce using rule 17 (instruction -> assignment .)
    STRING          reduce using rule 17 (instruction -> assignment .)
    $end            reduce using rule 17 (instruction -> assignment .)
    UNTIL           reduce using rule 17 (instruction -> assignment .)
    }               reduce using rule 17 (instruction -> assignment .)
    ELSE            reduce using rule 17 (instruction -> assignment .)


state 18

    (16) instruction -> labeled_instr .

    TYPE            reduce using rule 16 (instruction -> labeled_instr .)
    error           reduce using rule 16 (instruction -> labeled_instr .)
    PRINT           reduce using rule 16 (instruction -> labeled_instr .)
    ID              reduce using rule 16 (instruction -> labeled_instr .)
    IF              reduce using rule 16 (instruction -> labeled_instr .)
    WHILE           reduce using rule 16 (instruction -> labeled_instr .)
    REPEAT          reduce using rule 16 (instruction -> labeled_instr .)
    RETURN          reduce using rule 16 (instruction -> labeled_instr .)
    BREAK           reduce using rule 16 (instruction -> labeled_instr .)
    CONTINUE        reduce using rule 16 (instruction -> labeled_instr .)
    {               reduce using rule 16 (instruction -> labeled_instr .)
    (               reduce using rule 16 (instruction -> labeled_instr .)
    INTEGER         reduce using rule 16 (instruction -> labeled_instr .)
    FLOAT           reduce using rule 16 (instruction -> labeled_instr .)
    STRING          reduce using rule 16 (instruction -> labeled_instr .)
    $end            reduce using rule 16 (instruction -> labeled_instr .)
    UNTIL           reduce using rule 16 (instruction -> labeled_instr .)
    }               reduce using rule 16 (instruction -> labeled_instr .)
    ELSE            reduce using rule 16 (instruction -> labeled_instr .)


state 19

    (24) instruction -> compound_instr .

    TYPE            reduce using rule 24 (instruction -> compound_instr .)
    error           reduce using rule 24 (instruction -> compound_instr .)
    PRINT           reduce using rule 24 (instruction -> compound_instr .)
    ID              reduce using rule 24 (instruction -> compound_instr .)
    IF              reduce using rule 24 (instruction -> compound_instr .)
    WHILE           reduce using rule 24 (instruction -> compound_instr .)
    REPEAT          reduce using rule 24 (instruction -> compound_instr .)
    RETURN          reduce using rule 24 (instruction -> compound_instr .)
    BREAK           reduce using rule 24 (instruction -> compound_instr .)
    CONTINUE        reduce using rule 24 (instruction -> compound_instr .)
    {               reduce using rule 24 (instruction -> compound_instr .)
    (               reduce using rule 24 (instruction -> compound_instr .)
    INTEGER         reduce using rule 24 (instruction -> compound_instr .)
    FLOAT           reduce using rule 24 (instruction -> compound_instr .)
    STRING          reduce using rule 24 (instruction -> compound_instr .)
    $end            reduce using rule 24 (instruction -> compound_instr .)
    UNTIL           reduce using rule 24 (instruction -> compound_instr .)
    }               reduce using rule 24 (instruction -> compound_instr .)
    ELSE            reduce using rule 24 (instruction -> compound_instr .)


state 20

    (5) anything -> declaration .

    UNTIL           reduce using rule 5 (anything -> declaration .)
    TYPE            reduce using rule 5 (anything -> declaration .)
    error           reduce using rule 5 (anything -> declaration .)
    PRINT           reduce using rule 5 (anything -> declaration .)
    ID              reduce using rule 5 (anything -> declaration .)
    IF              reduce using rule 5 (anything -> declaration .)
    WHILE           reduce using rule 5 (anything -> declaration .)
    REPEAT          reduce using rule 5 (anything -> declaration .)
    RETURN          reduce using rule 5 (anything -> declaration .)
    BREAK           reduce using rule 5 (anything -> declaration .)
    CONTINUE        reduce using rule 5 (anything -> declaration .)
    {               reduce using rule 5 (anything -> declaration .)
    (               reduce using rule 5 (anything -> declaration .)
    INTEGER         reduce using rule 5 (anything -> declaration .)
    FLOAT           reduce using rule 5 (anything -> declaration .)
    STRING          reduce using rule 5 (anything -> declaration .)
    $end            reduce using rule 5 (anything -> declaration .)
    }               reduce using rule 5 (anything -> declaration .)


state 21

    (28) labeled_instr -> ID . : instruction
    (29) assignment -> ID . = expression ;
    (46) expression -> ID .
    (67) expression -> ID . ( expr_list_or_empty )
    (68) expression -> ID . ( error )

    :               shift and go to state 45
    =               shift and go to state 46
    ;               reduce using rule 46 (expression -> ID .)
    +               reduce using rule 46 (expression -> ID .)
    -               reduce using rule 46 (expression -> ID .)
    *               reduce using rule 46 (expression -> ID .)
    /               reduce using rule 46 (expression -> ID .)
    %               reduce using rule 46 (expression -> ID .)
    |               reduce using rule 46 (expression -> ID .)
    &               reduce using rule 46 (expression -> ID .)
    ^               reduce using rule 46 (expression -> ID .)
    AND             reduce using rule 46 (expression -> ID .)
    OR              reduce using rule 46 (expression -> ID .)
    SHL             reduce using rule 46 (expression -> ID .)
    SHR             reduce using rule 46 (expression -> ID .)
    EQ              reduce using rule 46 (expression -> ID .)
    NEQ             reduce using rule 46 (expression -> ID .)
    >               reduce using rule 46 (expression -> ID .)
    <               reduce using rule 46 (expression -> ID .)
    LE              reduce using rule 46 (expression -> ID .)
    GE              reduce using rule 46 (expression -> ID .)
    (               shift and go to state 44


state 22

    (30) choice_instr -> IF . ( condition ) instruction
    (31) choice_instr -> IF . ( condition ) instruction ELSE instruction
    (32) choice_instr -> IF . ( error ) instruction
    (33) choice_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 47


state 23

    (4) anything_list -> anything .

    }               reduce using rule 4 (anything_list -> anything .)
    TYPE            reduce using rule 4 (anything_list -> anything .)
    error           reduce using rule 4 (anything_list -> anything .)
    PRINT           reduce using rule 4 (anything_list -> anything .)
    ID              reduce using rule 4 (anything_list -> anything .)
    IF              reduce using rule 4 (anything_list -> anything .)
    WHILE           reduce using rule 4 (anything_list -> anything .)
    REPEAT          reduce using rule 4 (anything_list -> anything .)
    RETURN          reduce using rule 4 (anything_list -> anything .)
    BREAK           reduce using rule 4 (anything_list -> anything .)
    CONTINUE        reduce using rule 4 (anything_list -> anything .)
    {               reduce using rule 4 (anything_list -> anything .)
    (               reduce using rule 4 (anything_list -> anything .)
    INTEGER         reduce using rule 4 (anything_list -> anything .)
    FLOAT           reduce using rule 4 (anything_list -> anything .)
    STRING          reduce using rule 4 (anything_list -> anything .)
    UNTIL           reduce using rule 4 (anything_list -> anything .)
    $end            reduce using rule 4 (anything_list -> anything .)


state 24

    (22) instruction -> break_instr .

    TYPE            reduce using rule 22 (instruction -> break_instr .)
    error           reduce using rule 22 (instruction -> break_instr .)
    PRINT           reduce using rule 22 (instruction -> break_instr .)
    ID              reduce using rule 22 (instruction -> break_instr .)
    IF              reduce using rule 22 (instruction -> break_instr .)
    WHILE           reduce using rule 22 (instruction -> break_instr .)
    REPEAT          reduce using rule 22 (instruction -> break_instr .)
    RETURN          reduce using rule 22 (instruction -> break_instr .)
    BREAK           reduce using rule 22 (instruction -> break_instr .)
    CONTINUE        reduce using rule 22 (instruction -> break_instr .)
    {               reduce using rule 22 (instruction -> break_instr .)
    (               reduce using rule 22 (instruction -> break_instr .)
    INTEGER         reduce using rule 22 (instruction -> break_instr .)
    FLOAT           reduce using rule 22 (instruction -> break_instr .)
    STRING          reduce using rule 22 (instruction -> break_instr .)
    $end            reduce using rule 22 (instruction -> break_instr .)
    UNTIL           reduce using rule 22 (instruction -> break_instr .)
    }               reduce using rule 22 (instruction -> break_instr .)
    ELSE            reduce using rule 22 (instruction -> break_instr .)


state 25

    (7) anything -> instruction .

    UNTIL           reduce using rule 7 (anything -> instruction .)
    TYPE            reduce using rule 7 (anything -> instruction .)
    error           reduce using rule 7 (anything -> instruction .)
    PRINT           reduce using rule 7 (anything -> instruction .)
    ID              reduce using rule 7 (anything -> instruction .)
    IF              reduce using rule 7 (anything -> instruction .)
    WHILE           reduce using rule 7 (anything -> instruction .)
    REPEAT          reduce using rule 7 (anything -> instruction .)
    RETURN          reduce using rule 7 (anything -> instruction .)
    BREAK           reduce using rule 7 (anything -> instruction .)
    CONTINUE        reduce using rule 7 (anything -> instruction .)
    {               reduce using rule 7 (anything -> instruction .)
    (               reduce using rule 7 (anything -> instruction .)
    INTEGER         reduce using rule 7 (anything -> instruction .)
    FLOAT           reduce using rule 7 (anything -> instruction .)
    STRING          reduce using rule 7 (anything -> instruction .)
    $end            reduce using rule 7 (anything -> instruction .)
    }               reduce using rule 7 (anything -> instruction .)


state 26

    (6) anything -> fundef .

    UNTIL           reduce using rule 6 (anything -> fundef .)
    TYPE            reduce using rule 6 (anything -> fundef .)
    error           reduce using rule 6 (anything -> fundef .)
    PRINT           reduce using rule 6 (anything -> fundef .)
    ID              reduce using rule 6 (anything -> fundef .)
    IF              reduce using rule 6 (anything -> fundef .)
    WHILE           reduce using rule 6 (anything -> fundef .)
    REPEAT          reduce using rule 6 (anything -> fundef .)
    RETURN          reduce using rule 6 (anything -> fundef .)
    BREAK           reduce using rule 6 (anything -> fundef .)
    CONTINUE        reduce using rule 6 (anything -> fundef .)
    {               reduce using rule 6 (anything -> fundef .)
    (               reduce using rule 6 (anything -> fundef .)
    INTEGER         reduce using rule 6 (anything -> fundef .)
    FLOAT           reduce using rule 6 (anything -> fundef .)
    STRING          reduce using rule 6 (anything -> fundef .)
    $end            reduce using rule 6 (anything -> fundef .)
    }               reduce using rule 6 (anything -> fundef .)


state 27

    (1) program -> anything_list .
    (3) anything_list -> anything_list . anything
    (5) anything -> . declaration
    (6) anything -> . fundef
    (7) anything -> . instruction
    (10) declaration -> . TYPE inits ;
    (11) declaration -> . error ;
    (73) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    $end            reduce using rule 1 (program -> anything_list .)
    TYPE            shift and go to state 33
    error           shift and go to state 31
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    assignment                     shift and go to state 17
    labeled_instr                  shift and go to state 18
    compound_instr                 shift and go to state 19
    declaration                    shift and go to state 20
    anything                       shift and go to state 48
    break_instr                    shift and go to state 24
    instruction                    shift and go to state 25
    fundef                         shift and go to state 26
    print_instr                    shift and go to state 28
    expression                     shift and go to state 30

state 28

    (15) instruction -> print_instr .

    TYPE            reduce using rule 15 (instruction -> print_instr .)
    error           reduce using rule 15 (instruction -> print_instr .)
    PRINT           reduce using rule 15 (instruction -> print_instr .)
    ID              reduce using rule 15 (instruction -> print_instr .)
    IF              reduce using rule 15 (instruction -> print_instr .)
    WHILE           reduce using rule 15 (instruction -> print_instr .)
    REPEAT          reduce using rule 15 (instruction -> print_instr .)
    RETURN          reduce using rule 15 (instruction -> print_instr .)
    BREAK           reduce using rule 15 (instruction -> print_instr .)
    CONTINUE        reduce using rule 15 (instruction -> print_instr .)
    {               reduce using rule 15 (instruction -> print_instr .)
    (               reduce using rule 15 (instruction -> print_instr .)
    INTEGER         reduce using rule 15 (instruction -> print_instr .)
    FLOAT           reduce using rule 15 (instruction -> print_instr .)
    STRING          reduce using rule 15 (instruction -> print_instr .)
    $end            reduce using rule 15 (instruction -> print_instr .)
    UNTIL           reduce using rule 15 (instruction -> print_instr .)
    }               reduce using rule 15 (instruction -> print_instr .)
    ELSE            reduce using rule 15 (instruction -> print_instr .)


state 29

    (38) continue_instr -> CONTINUE . ;

    ;               shift and go to state 49


state 30

    (25) instruction -> expression . ;
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    ;               shift and go to state 65
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    |               shift and go to state 67
    &               shift and go to state 54
    ^               shift and go to state 68
    AND             shift and go to state 50
    OR              shift and go to state 61
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64


state 31

    (11) declaration -> error . ;

    ;               shift and go to state 69


state 32

    (40) compound_instr -> { . anything_list }
    (3) anything_list -> . anything_list anything
    (4) anything_list -> . anything
    (5) anything -> . declaration
    (6) anything -> . fundef
    (7) anything -> . instruction
    (10) declaration -> . TYPE inits ;
    (11) declaration -> . error ;
    (73) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    TYPE            shift and go to state 33
    error           shift and go to state 31
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    assignment                     shift and go to state 17
    labeled_instr                  shift and go to state 18
    compound_instr                 shift and go to state 19
    declaration                    shift and go to state 20
    anything                       shift and go to state 23
    break_instr                    shift and go to state 24
    instruction                    shift and go to state 25
    fundef                         shift and go to state 26
    anything_list                  shift and go to state 70
    print_instr                    shift and go to state 28
    expression                     shift and go to state 30

state 33

    (10) declaration -> TYPE . inits ;
    (73) fundef -> TYPE . ID ( args_list_or_empty ) compound_instr
    (12) inits -> . inits , init
    (13) inits -> . init
    (14) init -> . ID = expression

    ID              shift and go to state 73

    init                           shift and go to state 71
    inits                          shift and go to state 72

state 34

    (46) expression -> ID .
    (67) expression -> ID . ( expr_list_or_empty )
    (68) expression -> ID . ( error )

    +               reduce using rule 46 (expression -> ID .)
    -               reduce using rule 46 (expression -> ID .)
    *               reduce using rule 46 (expression -> ID .)
    /               reduce using rule 46 (expression -> ID .)
    %               reduce using rule 46 (expression -> ID .)
    |               reduce using rule 46 (expression -> ID .)
    &               reduce using rule 46 (expression -> ID .)
    ^               reduce using rule 46 (expression -> ID .)
    AND             reduce using rule 46 (expression -> ID .)
    OR              reduce using rule 46 (expression -> ID .)
    SHL             reduce using rule 46 (expression -> ID .)
    SHR             reduce using rule 46 (expression -> ID .)
    EQ              reduce using rule 46 (expression -> ID .)
    NEQ             reduce using rule 46 (expression -> ID .)
    >               reduce using rule 46 (expression -> ID .)
    <               reduce using rule 46 (expression -> ID .)
    LE              reduce using rule 46 (expression -> ID .)
    GE              reduce using rule 46 (expression -> ID .)
    ;               reduce using rule 46 (expression -> ID .)
    ,               reduce using rule 46 (expression -> ID .)
    )               reduce using rule 46 (expression -> ID .)
    (               shift and go to state 44


state 35

    (37) return_instr -> RETURN expression . ;
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    ;               shift and go to state 74
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    |               shift and go to state 67
    &               shift and go to state 54
    ^               shift and go to state 68
    AND             shift and go to state 50
    OR              shift and go to state 61
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64


state 36

    (26) print_instr -> PRINT expr_list . ;
    (71) expr_list -> expr_list . , expression

    ;               shift and go to state 75
    ,               shift and go to state 76


state 37

    (27) print_instr -> PRINT error . ;

    ;               shift and go to state 77


state 38

    (72) expr_list -> expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    ;               reduce using rule 72 (expr_list -> expression .)
    ,               reduce using rule 72 (expr_list -> expression .)
    )               reduce using rule 72 (expr_list -> expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    |               shift and go to state 67
    &               shift and go to state 54
    ^               shift and go to state 68
    AND             shift and go to state 50
    OR              shift and go to state 61
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64


state 39

    (34) while_instr -> WHILE ( . condition ) instruction
    (35) while_instr -> WHILE ( . error ) instruction
    (41) condition -> . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    error           shift and go to state 79
    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 80
    condition                      shift and go to state 78

state 40

    (66) expression -> ( error . )

    )               shift and go to state 81


state 41

    (65) expression -> ( expression . )
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    )               shift and go to state 82
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    |               shift and go to state 67
    &               shift and go to state 54
    ^               shift and go to state 68
    AND             shift and go to state 50
    OR              shift and go to state 61
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64


state 42

    (39) break_instr -> BREAK ; .

    TYPE            reduce using rule 39 (break_instr -> BREAK ; .)
    error           reduce using rule 39 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 39 (break_instr -> BREAK ; .)
    ID              reduce using rule 39 (break_instr -> BREAK ; .)
    IF              reduce using rule 39 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 39 (break_instr -> BREAK ; .)
    REPEAT          reduce using rule 39 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 39 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 39 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 39 (break_instr -> BREAK ; .)
    {               reduce using rule 39 (break_instr -> BREAK ; .)
    (               reduce using rule 39 (break_instr -> BREAK ; .)
    INTEGER         reduce using rule 39 (break_instr -> BREAK ; .)
    FLOAT           reduce using rule 39 (break_instr -> BREAK ; .)
    STRING          reduce using rule 39 (break_instr -> BREAK ; .)
    $end            reduce using rule 39 (break_instr -> BREAK ; .)
    UNTIL           reduce using rule 39 (break_instr -> BREAK ; .)
    }               reduce using rule 39 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 39 (break_instr -> BREAK ; .)


state 43

    (36) repeat_instr -> REPEAT anything_list . UNTIL condition ;
    (3) anything_list -> anything_list . anything
    (5) anything -> . declaration
    (6) anything -> . fundef
    (7) anything -> . instruction
    (10) declaration -> . TYPE inits ;
    (11) declaration -> . error ;
    (73) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    UNTIL           shift and go to state 83
    TYPE            shift and go to state 33
    error           shift and go to state 31
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    assignment                     shift and go to state 17
    labeled_instr                  shift and go to state 18
    compound_instr                 shift and go to state 19
    declaration                    shift and go to state 20
    anything                       shift and go to state 48
    break_instr                    shift and go to state 24
    instruction                    shift and go to state 25
    fundef                         shift and go to state 26
    print_instr                    shift and go to state 28
    expression                     shift and go to state 30

state 44

    (67) expression -> ID ( . expr_list_or_empty )
    (68) expression -> ID ( . error )
    (69) expr_list_or_empty -> . expr_list
    (70) expr_list_or_empty -> .
    (71) expr_list -> . expr_list , expression
    (72) expr_list -> . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    error           shift and go to state 86
    )               reduce using rule 70 (expr_list_or_empty -> .)
    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    expr_list                      shift and go to state 84
    expr_list_or_empty             shift and go to state 85
    expression                     shift and go to state 38
    const                          shift and go to state 8

state 45

    (28) labeled_instr -> ID : . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 17
    instruction                    shift and go to state 87
    compound_instr                 shift and go to state 19
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    break_instr                    shift and go to state 24
    labeled_instr                  shift and go to state 18
    expression                     shift and go to state 30
    repeat_instr                   shift and go to state 6

state 46

    (29) assignment -> ID = . expression ;
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 88

state 47

    (30) choice_instr -> IF ( . condition ) instruction
    (31) choice_instr -> IF ( . condition ) instruction ELSE instruction
    (32) choice_instr -> IF ( . error ) instruction
    (33) choice_instr -> IF ( . error ) instruction ELSE instruction
    (41) condition -> . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    error           shift and go to state 90
    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 80
    condition                      shift and go to state 89

state 48

    (3) anything_list -> anything_list anything .

    }               reduce using rule 3 (anything_list -> anything_list anything .)
    TYPE            reduce using rule 3 (anything_list -> anything_list anything .)
    error           reduce using rule 3 (anything_list -> anything_list anything .)
    PRINT           reduce using rule 3 (anything_list -> anything_list anything .)
    ID              reduce using rule 3 (anything_list -> anything_list anything .)
    IF              reduce using rule 3 (anything_list -> anything_list anything .)
    WHILE           reduce using rule 3 (anything_list -> anything_list anything .)
    REPEAT          reduce using rule 3 (anything_list -> anything_list anything .)
    RETURN          reduce using rule 3 (anything_list -> anything_list anything .)
    BREAK           reduce using rule 3 (anything_list -> anything_list anything .)
    CONTINUE        reduce using rule 3 (anything_list -> anything_list anything .)
    {               reduce using rule 3 (anything_list -> anything_list anything .)
    (               reduce using rule 3 (anything_list -> anything_list anything .)
    INTEGER         reduce using rule 3 (anything_list -> anything_list anything .)
    FLOAT           reduce using rule 3 (anything_list -> anything_list anything .)
    STRING          reduce using rule 3 (anything_list -> anything_list anything .)
    UNTIL           reduce using rule 3 (anything_list -> anything_list anything .)
    $end            reduce using rule 3 (anything_list -> anything_list anything .)


state 49

    (38) continue_instr -> CONTINUE ; .

    UNTIL           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    TYPE            reduce using rule 38 (continue_instr -> CONTINUE ; .)
    error           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 38 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 38 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    REPEAT          reduce using rule 38 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 38 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 38 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 38 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 38 (continue_instr -> CONTINUE ; .)
    INTEGER         reduce using rule 38 (continue_instr -> CONTINUE ; .)
    FLOAT           reduce using rule 38 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 38 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 38 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 38 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 38 (continue_instr -> CONTINUE ; .)


state 50

    (55) expression -> expression AND . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 91

state 51

    (58) expression -> expression SHR . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 92

state 52

    (63) expression -> expression LE . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 93

state 53

    (51) expression -> expression % . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 94

state 54

    (53) expression -> expression & . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 95

state 55

    (62) expression -> expression < . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 96

state 56

    (57) expression -> expression SHL . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 97

state 57

    (47) expression -> expression + . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 98

state 58

    (49) expression -> expression * . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 99

state 59

    (48) expression -> expression - . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 100

state 60

    (50) expression -> expression / . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 101

state 61

    (56) expression -> expression OR . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 102

state 62

    (59) expression -> expression EQ . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 103

state 63

    (61) expression -> expression > . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 104

state 64

    (64) expression -> expression GE . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 105

state 65

    (25) instruction -> expression ; .

    TYPE            reduce using rule 25 (instruction -> expression ; .)
    error           reduce using rule 25 (instruction -> expression ; .)
    PRINT           reduce using rule 25 (instruction -> expression ; .)
    ID              reduce using rule 25 (instruction -> expression ; .)
    IF              reduce using rule 25 (instruction -> expression ; .)
    WHILE           reduce using rule 25 (instruction -> expression ; .)
    REPEAT          reduce using rule 25 (instruction -> expression ; .)
    RETURN          reduce using rule 25 (instruction -> expression ; .)
    BREAK           reduce using rule 25 (instruction -> expression ; .)
    CONTINUE        reduce using rule 25 (instruction -> expression ; .)
    {               reduce using rule 25 (instruction -> expression ; .)
    (               reduce using rule 25 (instruction -> expression ; .)
    INTEGER         reduce using rule 25 (instruction -> expression ; .)
    FLOAT           reduce using rule 25 (instruction -> expression ; .)
    STRING          reduce using rule 25 (instruction -> expression ; .)
    $end            reduce using rule 25 (instruction -> expression ; .)
    UNTIL           reduce using rule 25 (instruction -> expression ; .)
    }               reduce using rule 25 (instruction -> expression ; .)
    ELSE            reduce using rule 25 (instruction -> expression ; .)


state 66

    (60) expression -> expression NEQ . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 106

state 67

    (52) expression -> expression | . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 107

state 68

    (54) expression -> expression ^ . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 108

state 69

    (11) declaration -> error ; .

    UNTIL           reduce using rule 11 (declaration -> error ; .)
    TYPE            reduce using rule 11 (declaration -> error ; .)
    error           reduce using rule 11 (declaration -> error ; .)
    PRINT           reduce using rule 11 (declaration -> error ; .)
    ID              reduce using rule 11 (declaration -> error ; .)
    IF              reduce using rule 11 (declaration -> error ; .)
    WHILE           reduce using rule 11 (declaration -> error ; .)
    REPEAT          reduce using rule 11 (declaration -> error ; .)
    RETURN          reduce using rule 11 (declaration -> error ; .)
    BREAK           reduce using rule 11 (declaration -> error ; .)
    CONTINUE        reduce using rule 11 (declaration -> error ; .)
    {               reduce using rule 11 (declaration -> error ; .)
    (               reduce using rule 11 (declaration -> error ; .)
    INTEGER         reduce using rule 11 (declaration -> error ; .)
    FLOAT           reduce using rule 11 (declaration -> error ; .)
    STRING          reduce using rule 11 (declaration -> error ; .)
    }               reduce using rule 11 (declaration -> error ; .)
    $end            reduce using rule 11 (declaration -> error ; .)


state 70

    (40) compound_instr -> { anything_list . }
    (3) anything_list -> anything_list . anything
    (5) anything -> . declaration
    (6) anything -> . fundef
    (7) anything -> . instruction
    (10) declaration -> . TYPE inits ;
    (11) declaration -> . error ;
    (73) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    }               shift and go to state 109
    TYPE            shift and go to state 33
    error           shift and go to state 31
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    assignment                     shift and go to state 17
    labeled_instr                  shift and go to state 18
    compound_instr                 shift and go to state 19
    declaration                    shift and go to state 20
    anything                       shift and go to state 48
    break_instr                    shift and go to state 24
    instruction                    shift and go to state 25
    fundef                         shift and go to state 26
    print_instr                    shift and go to state 28
    expression                     shift and go to state 30

state 71

    (13) inits -> init .

    ;               reduce using rule 13 (inits -> init .)
    ,               reduce using rule 13 (inits -> init .)


state 72

    (10) declaration -> TYPE inits . ;
    (12) inits -> inits . , init

    ;               shift and go to state 110
    ,               shift and go to state 111


state 73

    (73) fundef -> TYPE ID . ( args_list_or_empty ) compound_instr
    (14) init -> ID . = expression

    (               shift and go to state 112
    =               shift and go to state 113


state 74

    (37) return_instr -> RETURN expression ; .

    TYPE            reduce using rule 37 (return_instr -> RETURN expression ; .)
    error           reduce using rule 37 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 37 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 37 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 37 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 37 (return_instr -> RETURN expression ; .)
    REPEAT          reduce using rule 37 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 37 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 37 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 37 (return_instr -> RETURN expression ; .)
    {               reduce using rule 37 (return_instr -> RETURN expression ; .)
    (               reduce using rule 37 (return_instr -> RETURN expression ; .)
    INTEGER         reduce using rule 37 (return_instr -> RETURN expression ; .)
    FLOAT           reduce using rule 37 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 37 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 37 (return_instr -> RETURN expression ; .)
    UNTIL           reduce using rule 37 (return_instr -> RETURN expression ; .)
    }               reduce using rule 37 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 37 (return_instr -> RETURN expression ; .)


state 75

    (26) print_instr -> PRINT expr_list ; .

    TYPE            reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    error           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    PRINT           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    ID              reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    IF              reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    WHILE           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    REPEAT          reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    RETURN          reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    BREAK           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    CONTINUE        reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    {               reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    (               reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    INTEGER         reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    FLOAT           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    STRING          reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    $end            reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    UNTIL           reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    }               reduce using rule 26 (print_instr -> PRINT expr_list ; .)
    ELSE            reduce using rule 26 (print_instr -> PRINT expr_list ; .)


state 76

    (71) expr_list -> expr_list , . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    expression                     shift and go to state 114
    const                          shift and go to state 8

state 77

    (27) print_instr -> PRINT error ; .

    TYPE            reduce using rule 27 (print_instr -> PRINT error ; .)
    error           reduce using rule 27 (print_instr -> PRINT error ; .)
    PRINT           reduce using rule 27 (print_instr -> PRINT error ; .)
    ID              reduce using rule 27 (print_instr -> PRINT error ; .)
    IF              reduce using rule 27 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 27 (print_instr -> PRINT error ; .)
    REPEAT          reduce using rule 27 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 27 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 27 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 27 (print_instr -> PRINT error ; .)
    {               reduce using rule 27 (print_instr -> PRINT error ; .)
    (               reduce using rule 27 (print_instr -> PRINT error ; .)
    INTEGER         reduce using rule 27 (print_instr -> PRINT error ; .)
    FLOAT           reduce using rule 27 (print_instr -> PRINT error ; .)
    STRING          reduce using rule 27 (print_instr -> PRINT error ; .)
    $end            reduce using rule 27 (print_instr -> PRINT error ; .)
    UNTIL           reduce using rule 27 (print_instr -> PRINT error ; .)
    }               reduce using rule 27 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 27 (print_instr -> PRINT error ; .)


state 78

    (34) while_instr -> WHILE ( condition . ) instruction

    )               shift and go to state 115


state 79

    (35) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 116


state 80

    (41) condition -> expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    )               reduce using rule 41 (condition -> expression .)
    ;               reduce using rule 41 (condition -> expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    |               shift and go to state 67
    &               shift and go to state 54
    ^               shift and go to state 68
    AND             shift and go to state 50
    OR              shift and go to state 61
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64


state 81

    (66) expression -> ( error ) .

    +               reduce using rule 66 (expression -> ( error ) .)
    -               reduce using rule 66 (expression -> ( error ) .)
    *               reduce using rule 66 (expression -> ( error ) .)
    /               reduce using rule 66 (expression -> ( error ) .)
    %               reduce using rule 66 (expression -> ( error ) .)
    |               reduce using rule 66 (expression -> ( error ) .)
    &               reduce using rule 66 (expression -> ( error ) .)
    ^               reduce using rule 66 (expression -> ( error ) .)
    AND             reduce using rule 66 (expression -> ( error ) .)
    OR              reduce using rule 66 (expression -> ( error ) .)
    SHL             reduce using rule 66 (expression -> ( error ) .)
    SHR             reduce using rule 66 (expression -> ( error ) .)
    EQ              reduce using rule 66 (expression -> ( error ) .)
    NEQ             reduce using rule 66 (expression -> ( error ) .)
    >               reduce using rule 66 (expression -> ( error ) .)
    <               reduce using rule 66 (expression -> ( error ) .)
    LE              reduce using rule 66 (expression -> ( error ) .)
    GE              reduce using rule 66 (expression -> ( error ) .)
    ;               reduce using rule 66 (expression -> ( error ) .)
    ,               reduce using rule 66 (expression -> ( error ) .)
    )               reduce using rule 66 (expression -> ( error ) .)


state 82

    (65) expression -> ( expression ) .

    +               reduce using rule 65 (expression -> ( expression ) .)
    -               reduce using rule 65 (expression -> ( expression ) .)
    *               reduce using rule 65 (expression -> ( expression ) .)
    /               reduce using rule 65 (expression -> ( expression ) .)
    %               reduce using rule 65 (expression -> ( expression ) .)
    |               reduce using rule 65 (expression -> ( expression ) .)
    &               reduce using rule 65 (expression -> ( expression ) .)
    ^               reduce using rule 65 (expression -> ( expression ) .)
    AND             reduce using rule 65 (expression -> ( expression ) .)
    OR              reduce using rule 65 (expression -> ( expression ) .)
    SHL             reduce using rule 65 (expression -> ( expression ) .)
    SHR             reduce using rule 65 (expression -> ( expression ) .)
    EQ              reduce using rule 65 (expression -> ( expression ) .)
    NEQ             reduce using rule 65 (expression -> ( expression ) .)
    >               reduce using rule 65 (expression -> ( expression ) .)
    <               reduce using rule 65 (expression -> ( expression ) .)
    LE              reduce using rule 65 (expression -> ( expression ) .)
    GE              reduce using rule 65 (expression -> ( expression ) .)
    ;               reduce using rule 65 (expression -> ( expression ) .)
    ,               reduce using rule 65 (expression -> ( expression ) .)
    )               reduce using rule 65 (expression -> ( expression ) .)


state 83

    (36) repeat_instr -> REPEAT anything_list UNTIL . condition ;
    (41) condition -> . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 80
    condition                      shift and go to state 117

state 84

    (69) expr_list_or_empty -> expr_list .
    (71) expr_list -> expr_list . , expression

    )               reduce using rule 69 (expr_list_or_empty -> expr_list .)
    ,               shift and go to state 76


state 85

    (67) expression -> ID ( expr_list_or_empty . )

    )               shift and go to state 118


state 86

    (68) expression -> ID ( error . )

    )               shift and go to state 119


state 87

    (28) labeled_instr -> ID : instruction .

    TYPE            reduce using rule 28 (labeled_instr -> ID : instruction .)
    error           reduce using rule 28 (labeled_instr -> ID : instruction .)
    PRINT           reduce using rule 28 (labeled_instr -> ID : instruction .)
    ID              reduce using rule 28 (labeled_instr -> ID : instruction .)
    IF              reduce using rule 28 (labeled_instr -> ID : instruction .)
    WHILE           reduce using rule 28 (labeled_instr -> ID : instruction .)
    REPEAT          reduce using rule 28 (labeled_instr -> ID : instruction .)
    RETURN          reduce using rule 28 (labeled_instr -> ID : instruction .)
    BREAK           reduce using rule 28 (labeled_instr -> ID : instruction .)
    CONTINUE        reduce using rule 28 (labeled_instr -> ID : instruction .)
    {               reduce using rule 28 (labeled_instr -> ID : instruction .)
    (               reduce using rule 28 (labeled_instr -> ID : instruction .)
    INTEGER         reduce using rule 28 (labeled_instr -> ID : instruction .)
    FLOAT           reduce using rule 28 (labeled_instr -> ID : instruction .)
    STRING          reduce using rule 28 (labeled_instr -> ID : instruction .)
    $end            reduce using rule 28 (labeled_instr -> ID : instruction .)
    UNTIL           reduce using rule 28 (labeled_instr -> ID : instruction .)
    }               reduce using rule 28 (labeled_instr -> ID : instruction .)
    ELSE            reduce using rule 28 (labeled_instr -> ID : instruction .)


state 88

    (29) assignment -> ID = expression . ;
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    ;               shift and go to state 120
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    |               shift and go to state 67
    &               shift and go to state 54
    ^               shift and go to state 68
    AND             shift and go to state 50
    OR              shift and go to state 61
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64


state 89

    (30) choice_instr -> IF ( condition . ) instruction
    (31) choice_instr -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 121


state 90

    (32) choice_instr -> IF ( error . ) instruction
    (33) choice_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 122


state 91

    (55) expression -> expression AND expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    AND             reduce using rule 55 (expression -> expression AND expression .)
    OR              reduce using rule 55 (expression -> expression AND expression .)
    ;               reduce using rule 55 (expression -> expression AND expression .)
    ,               reduce using rule 55 (expression -> expression AND expression .)
    )               reduce using rule 55 (expression -> expression AND expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    |               shift and go to state 67
    &               shift and go to state 54
    ^               shift and go to state 68
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64

  ! +               [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! |               [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! &               [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! SHL             [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! SHR             [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 55 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]


state 92

    (58) expression -> expression SHR expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 58 (expression -> expression SHR expression .)
    &               reduce using rule 58 (expression -> expression SHR expression .)
    ^               reduce using rule 58 (expression -> expression SHR expression .)
    AND             reduce using rule 58 (expression -> expression SHR expression .)
    OR              reduce using rule 58 (expression -> expression SHR expression .)
    SHL             reduce using rule 58 (expression -> expression SHR expression .)
    SHR             reduce using rule 58 (expression -> expression SHR expression .)
    EQ              reduce using rule 58 (expression -> expression SHR expression .)
    NEQ             reduce using rule 58 (expression -> expression SHR expression .)
    >               reduce using rule 58 (expression -> expression SHR expression .)
    <               reduce using rule 58 (expression -> expression SHR expression .)
    LE              reduce using rule 58 (expression -> expression SHR expression .)
    GE              reduce using rule 58 (expression -> expression SHR expression .)
    ;               reduce using rule 58 (expression -> expression SHR expression .)
    ,               reduce using rule 58 (expression -> expression SHR expression .)
    )               reduce using rule 58 (expression -> expression SHR expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53

  ! +               [ reduce using rule 58 (expression -> expression SHR expression .) ]
  ! -               [ reduce using rule 58 (expression -> expression SHR expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression SHR expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression SHR expression .) ]
  ! %               [ reduce using rule 58 (expression -> expression SHR expression .) ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! SHL             [ shift and go to state 56 ]
  ! SHR             [ shift and go to state 51 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 93

    (63) expression -> expression LE expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 63 (expression -> expression LE expression .)
    &               reduce using rule 63 (expression -> expression LE expression .)
    ^               reduce using rule 63 (expression -> expression LE expression .)
    AND             reduce using rule 63 (expression -> expression LE expression .)
    OR              reduce using rule 63 (expression -> expression LE expression .)
    EQ              reduce using rule 63 (expression -> expression LE expression .)
    NEQ             reduce using rule 63 (expression -> expression LE expression .)
    >               reduce using rule 63 (expression -> expression LE expression .)
    <               reduce using rule 63 (expression -> expression LE expression .)
    LE              reduce using rule 63 (expression -> expression LE expression .)
    GE              reduce using rule 63 (expression -> expression LE expression .)
    ;               reduce using rule 63 (expression -> expression LE expression .)
    ,               reduce using rule 63 (expression -> expression LE expression .)
    )               reduce using rule 63 (expression -> expression LE expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    SHL             shift and go to state 56
    SHR             shift and go to state 51

  ! +               [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! %               [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! SHL             [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! SHR             [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 94

    (51) expression -> expression % expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    +               reduce using rule 51 (expression -> expression % expression .)
    -               reduce using rule 51 (expression -> expression % expression .)
    *               reduce using rule 51 (expression -> expression % expression .)
    /               reduce using rule 51 (expression -> expression % expression .)
    %               reduce using rule 51 (expression -> expression % expression .)
    |               reduce using rule 51 (expression -> expression % expression .)
    &               reduce using rule 51 (expression -> expression % expression .)
    ^               reduce using rule 51 (expression -> expression % expression .)
    AND             reduce using rule 51 (expression -> expression % expression .)
    OR              reduce using rule 51 (expression -> expression % expression .)
    SHL             reduce using rule 51 (expression -> expression % expression .)
    SHR             reduce using rule 51 (expression -> expression % expression .)
    EQ              reduce using rule 51 (expression -> expression % expression .)
    NEQ             reduce using rule 51 (expression -> expression % expression .)
    >               reduce using rule 51 (expression -> expression % expression .)
    <               reduce using rule 51 (expression -> expression % expression .)
    LE              reduce using rule 51 (expression -> expression % expression .)
    GE              reduce using rule 51 (expression -> expression % expression .)
    ;               reduce using rule 51 (expression -> expression % expression .)
    ,               reduce using rule 51 (expression -> expression % expression .)
    )               reduce using rule 51 (expression -> expression % expression .)

  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 60 ]
  ! %               [ shift and go to state 53 ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! SHL             [ shift and go to state 56 ]
  ! SHR             [ shift and go to state 51 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 95

    (53) expression -> expression & expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 53 (expression -> expression & expression .)
    &               reduce using rule 53 (expression -> expression & expression .)
    ^               reduce using rule 53 (expression -> expression & expression .)
    AND             reduce using rule 53 (expression -> expression & expression .)
    OR              reduce using rule 53 (expression -> expression & expression .)
    ;               reduce using rule 53 (expression -> expression & expression .)
    ,               reduce using rule 53 (expression -> expression & expression .)
    )               reduce using rule 53 (expression -> expression & expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64

  ! +               [ reduce using rule 53 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 53 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 53 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression & expression .) ]
  ! %               [ reduce using rule 53 (expression -> expression & expression .) ]
  ! SHL             [ reduce using rule 53 (expression -> expression & expression .) ]
  ! SHR             [ reduce using rule 53 (expression -> expression & expression .) ]
  ! EQ              [ reduce using rule 53 (expression -> expression & expression .) ]
  ! NEQ             [ reduce using rule 53 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 53 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 53 (expression -> expression & expression .) ]
  ! LE              [ reduce using rule 53 (expression -> expression & expression .) ]
  ! GE              [ reduce using rule 53 (expression -> expression & expression .) ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]


state 96

    (62) expression -> expression < expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 62 (expression -> expression < expression .)
    &               reduce using rule 62 (expression -> expression < expression .)
    ^               reduce using rule 62 (expression -> expression < expression .)
    AND             reduce using rule 62 (expression -> expression < expression .)
    OR              reduce using rule 62 (expression -> expression < expression .)
    EQ              reduce using rule 62 (expression -> expression < expression .)
    NEQ             reduce using rule 62 (expression -> expression < expression .)
    >               reduce using rule 62 (expression -> expression < expression .)
    <               reduce using rule 62 (expression -> expression < expression .)
    LE              reduce using rule 62 (expression -> expression < expression .)
    GE              reduce using rule 62 (expression -> expression < expression .)
    ;               reduce using rule 62 (expression -> expression < expression .)
    ,               reduce using rule 62 (expression -> expression < expression .)
    )               reduce using rule 62 (expression -> expression < expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    SHL             shift and go to state 56
    SHR             shift and go to state 51

  ! +               [ reduce using rule 62 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 62 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 62 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 62 (expression -> expression < expression .) ]
  ! SHL             [ reduce using rule 62 (expression -> expression < expression .) ]
  ! SHR             [ reduce using rule 62 (expression -> expression < expression .) ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 97

    (57) expression -> expression SHL expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 57 (expression -> expression SHL expression .)
    &               reduce using rule 57 (expression -> expression SHL expression .)
    ^               reduce using rule 57 (expression -> expression SHL expression .)
    AND             reduce using rule 57 (expression -> expression SHL expression .)
    OR              reduce using rule 57 (expression -> expression SHL expression .)
    SHL             reduce using rule 57 (expression -> expression SHL expression .)
    SHR             reduce using rule 57 (expression -> expression SHL expression .)
    EQ              reduce using rule 57 (expression -> expression SHL expression .)
    NEQ             reduce using rule 57 (expression -> expression SHL expression .)
    >               reduce using rule 57 (expression -> expression SHL expression .)
    <               reduce using rule 57 (expression -> expression SHL expression .)
    LE              reduce using rule 57 (expression -> expression SHL expression .)
    GE              reduce using rule 57 (expression -> expression SHL expression .)
    ;               reduce using rule 57 (expression -> expression SHL expression .)
    ,               reduce using rule 57 (expression -> expression SHL expression .)
    )               reduce using rule 57 (expression -> expression SHL expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53

  ! +               [ reduce using rule 57 (expression -> expression SHL expression .) ]
  ! -               [ reduce using rule 57 (expression -> expression SHL expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression SHL expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression SHL expression .) ]
  ! %               [ reduce using rule 57 (expression -> expression SHL expression .) ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! SHL             [ shift and go to state 56 ]
  ! SHR             [ shift and go to state 51 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 98

    (47) expression -> expression + expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    +               reduce using rule 47 (expression -> expression + expression .)
    -               reduce using rule 47 (expression -> expression + expression .)
    |               reduce using rule 47 (expression -> expression + expression .)
    &               reduce using rule 47 (expression -> expression + expression .)
    ^               reduce using rule 47 (expression -> expression + expression .)
    AND             reduce using rule 47 (expression -> expression + expression .)
    OR              reduce using rule 47 (expression -> expression + expression .)
    SHL             reduce using rule 47 (expression -> expression + expression .)
    SHR             reduce using rule 47 (expression -> expression + expression .)
    EQ              reduce using rule 47 (expression -> expression + expression .)
    NEQ             reduce using rule 47 (expression -> expression + expression .)
    >               reduce using rule 47 (expression -> expression + expression .)
    <               reduce using rule 47 (expression -> expression + expression .)
    LE              reduce using rule 47 (expression -> expression + expression .)
    GE              reduce using rule 47 (expression -> expression + expression .)
    ;               reduce using rule 47 (expression -> expression + expression .)
    ,               reduce using rule 47 (expression -> expression + expression .)
    )               reduce using rule 47 (expression -> expression + expression .)
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53

  ! *               [ reduce using rule 47 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 47 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 47 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! SHL             [ shift and go to state 56 ]
  ! SHR             [ shift and go to state 51 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 99

    (49) expression -> expression * expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    +               reduce using rule 49 (expression -> expression * expression .)
    -               reduce using rule 49 (expression -> expression * expression .)
    *               reduce using rule 49 (expression -> expression * expression .)
    /               reduce using rule 49 (expression -> expression * expression .)
    %               reduce using rule 49 (expression -> expression * expression .)
    |               reduce using rule 49 (expression -> expression * expression .)
    &               reduce using rule 49 (expression -> expression * expression .)
    ^               reduce using rule 49 (expression -> expression * expression .)
    AND             reduce using rule 49 (expression -> expression * expression .)
    OR              reduce using rule 49 (expression -> expression * expression .)
    SHL             reduce using rule 49 (expression -> expression * expression .)
    SHR             reduce using rule 49 (expression -> expression * expression .)
    EQ              reduce using rule 49 (expression -> expression * expression .)
    NEQ             reduce using rule 49 (expression -> expression * expression .)
    >               reduce using rule 49 (expression -> expression * expression .)
    <               reduce using rule 49 (expression -> expression * expression .)
    LE              reduce using rule 49 (expression -> expression * expression .)
    GE              reduce using rule 49 (expression -> expression * expression .)
    ;               reduce using rule 49 (expression -> expression * expression .)
    ,               reduce using rule 49 (expression -> expression * expression .)
    )               reduce using rule 49 (expression -> expression * expression .)

  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 60 ]
  ! %               [ shift and go to state 53 ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! SHL             [ shift and go to state 56 ]
  ! SHR             [ shift and go to state 51 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 100

    (48) expression -> expression - expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    +               reduce using rule 48 (expression -> expression - expression .)
    -               reduce using rule 48 (expression -> expression - expression .)
    |               reduce using rule 48 (expression -> expression - expression .)
    &               reduce using rule 48 (expression -> expression - expression .)
    ^               reduce using rule 48 (expression -> expression - expression .)
    AND             reduce using rule 48 (expression -> expression - expression .)
    OR              reduce using rule 48 (expression -> expression - expression .)
    SHL             reduce using rule 48 (expression -> expression - expression .)
    SHR             reduce using rule 48 (expression -> expression - expression .)
    EQ              reduce using rule 48 (expression -> expression - expression .)
    NEQ             reduce using rule 48 (expression -> expression - expression .)
    >               reduce using rule 48 (expression -> expression - expression .)
    <               reduce using rule 48 (expression -> expression - expression .)
    LE              reduce using rule 48 (expression -> expression - expression .)
    GE              reduce using rule 48 (expression -> expression - expression .)
    ;               reduce using rule 48 (expression -> expression - expression .)
    ,               reduce using rule 48 (expression -> expression - expression .)
    )               reduce using rule 48 (expression -> expression - expression .)
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53

  ! *               [ reduce using rule 48 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 48 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 48 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! SHL             [ shift and go to state 56 ]
  ! SHR             [ shift and go to state 51 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 101

    (50) expression -> expression / expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    +               reduce using rule 50 (expression -> expression / expression .)
    -               reduce using rule 50 (expression -> expression / expression .)
    *               reduce using rule 50 (expression -> expression / expression .)
    /               reduce using rule 50 (expression -> expression / expression .)
    %               reduce using rule 50 (expression -> expression / expression .)
    |               reduce using rule 50 (expression -> expression / expression .)
    &               reduce using rule 50 (expression -> expression / expression .)
    ^               reduce using rule 50 (expression -> expression / expression .)
    AND             reduce using rule 50 (expression -> expression / expression .)
    OR              reduce using rule 50 (expression -> expression / expression .)
    SHL             reduce using rule 50 (expression -> expression / expression .)
    SHR             reduce using rule 50 (expression -> expression / expression .)
    EQ              reduce using rule 50 (expression -> expression / expression .)
    NEQ             reduce using rule 50 (expression -> expression / expression .)
    >               reduce using rule 50 (expression -> expression / expression .)
    <               reduce using rule 50 (expression -> expression / expression .)
    LE              reduce using rule 50 (expression -> expression / expression .)
    GE              reduce using rule 50 (expression -> expression / expression .)
    ;               reduce using rule 50 (expression -> expression / expression .)
    ,               reduce using rule 50 (expression -> expression / expression .)
    )               reduce using rule 50 (expression -> expression / expression .)

  ! +               [ shift and go to state 57 ]
  ! -               [ shift and go to state 59 ]
  ! *               [ shift and go to state 58 ]
  ! /               [ shift and go to state 60 ]
  ! %               [ shift and go to state 53 ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! SHL             [ shift and go to state 56 ]
  ! SHR             [ shift and go to state 51 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 102

    (56) expression -> expression OR expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    OR              reduce using rule 56 (expression -> expression OR expression .)
    ;               reduce using rule 56 (expression -> expression OR expression .)
    ,               reduce using rule 56 (expression -> expression OR expression .)
    )               reduce using rule 56 (expression -> expression OR expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    |               shift and go to state 67
    &               shift and go to state 54
    ^               shift and go to state 68
    AND             shift and go to state 50
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64

  ! +               [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! |               [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! &               [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! SHL             [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! SHR             [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 56 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 61 ]


state 103

    (59) expression -> expression EQ expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 59 (expression -> expression EQ expression .)
    &               reduce using rule 59 (expression -> expression EQ expression .)
    ^               reduce using rule 59 (expression -> expression EQ expression .)
    AND             reduce using rule 59 (expression -> expression EQ expression .)
    OR              reduce using rule 59 (expression -> expression EQ expression .)
    EQ              reduce using rule 59 (expression -> expression EQ expression .)
    NEQ             reduce using rule 59 (expression -> expression EQ expression .)
    >               reduce using rule 59 (expression -> expression EQ expression .)
    <               reduce using rule 59 (expression -> expression EQ expression .)
    LE              reduce using rule 59 (expression -> expression EQ expression .)
    GE              reduce using rule 59 (expression -> expression EQ expression .)
    ;               reduce using rule 59 (expression -> expression EQ expression .)
    ,               reduce using rule 59 (expression -> expression EQ expression .)
    )               reduce using rule 59 (expression -> expression EQ expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    SHL             shift and go to state 56
    SHR             shift and go to state 51

  ! +               [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! SHL             [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! SHR             [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 104

    (61) expression -> expression > expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 61 (expression -> expression > expression .)
    &               reduce using rule 61 (expression -> expression > expression .)
    ^               reduce using rule 61 (expression -> expression > expression .)
    AND             reduce using rule 61 (expression -> expression > expression .)
    OR              reduce using rule 61 (expression -> expression > expression .)
    EQ              reduce using rule 61 (expression -> expression > expression .)
    NEQ             reduce using rule 61 (expression -> expression > expression .)
    >               reduce using rule 61 (expression -> expression > expression .)
    <               reduce using rule 61 (expression -> expression > expression .)
    LE              reduce using rule 61 (expression -> expression > expression .)
    GE              reduce using rule 61 (expression -> expression > expression .)
    ;               reduce using rule 61 (expression -> expression > expression .)
    ,               reduce using rule 61 (expression -> expression > expression .)
    )               reduce using rule 61 (expression -> expression > expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    SHL             shift and go to state 56
    SHR             shift and go to state 51

  ! +               [ reduce using rule 61 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 61 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 61 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 61 (expression -> expression > expression .) ]
  ! SHL             [ reduce using rule 61 (expression -> expression > expression .) ]
  ! SHR             [ reduce using rule 61 (expression -> expression > expression .) ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 105

    (64) expression -> expression GE expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 64 (expression -> expression GE expression .)
    &               reduce using rule 64 (expression -> expression GE expression .)
    ^               reduce using rule 64 (expression -> expression GE expression .)
    AND             reduce using rule 64 (expression -> expression GE expression .)
    OR              reduce using rule 64 (expression -> expression GE expression .)
    EQ              reduce using rule 64 (expression -> expression GE expression .)
    NEQ             reduce using rule 64 (expression -> expression GE expression .)
    >               reduce using rule 64 (expression -> expression GE expression .)
    <               reduce using rule 64 (expression -> expression GE expression .)
    LE              reduce using rule 64 (expression -> expression GE expression .)
    GE              reduce using rule 64 (expression -> expression GE expression .)
    ;               reduce using rule 64 (expression -> expression GE expression .)
    ,               reduce using rule 64 (expression -> expression GE expression .)
    )               reduce using rule 64 (expression -> expression GE expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    SHL             shift and go to state 56
    SHR             shift and go to state 51

  ! +               [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! %               [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! SHL             [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! SHR             [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 106

    (60) expression -> expression NEQ expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 60 (expression -> expression NEQ expression .)
    &               reduce using rule 60 (expression -> expression NEQ expression .)
    ^               reduce using rule 60 (expression -> expression NEQ expression .)
    AND             reduce using rule 60 (expression -> expression NEQ expression .)
    OR              reduce using rule 60 (expression -> expression NEQ expression .)
    EQ              reduce using rule 60 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 60 (expression -> expression NEQ expression .)
    >               reduce using rule 60 (expression -> expression NEQ expression .)
    <               reduce using rule 60 (expression -> expression NEQ expression .)
    LE              reduce using rule 60 (expression -> expression NEQ expression .)
    GE              reduce using rule 60 (expression -> expression NEQ expression .)
    ;               reduce using rule 60 (expression -> expression NEQ expression .)
    ,               reduce using rule 60 (expression -> expression NEQ expression .)
    )               reduce using rule 60 (expression -> expression NEQ expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    SHL             shift and go to state 56
    SHR             shift and go to state 51

  ! +               [ reduce using rule 60 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 60 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 60 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression NEQ expression .) ]
  ! %               [ reduce using rule 60 (expression -> expression NEQ expression .) ]
  ! SHL             [ reduce using rule 60 (expression -> expression NEQ expression .) ]
  ! SHR             [ reduce using rule 60 (expression -> expression NEQ expression .) ]
  ! |               [ shift and go to state 67 ]
  ! &               [ shift and go to state 54 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NEQ             [ shift and go to state 66 ]
  ! >               [ shift and go to state 63 ]
  ! <               [ shift and go to state 55 ]
  ! LE              [ shift and go to state 52 ]
  ! GE              [ shift and go to state 64 ]


state 107

    (52) expression -> expression | expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 52 (expression -> expression | expression .)
    AND             reduce using rule 52 (expression -> expression | expression .)
    OR              reduce using rule 52 (expression -> expression | expression .)
    ;               reduce using rule 52 (expression -> expression | expression .)
    ,               reduce using rule 52 (expression -> expression | expression .)
    )               reduce using rule 52 (expression -> expression | expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    &               shift and go to state 54
    ^               shift and go to state 68
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64

  ! +               [ reduce using rule 52 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 52 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 52 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 52 (expression -> expression | expression .) ]
  ! %               [ reduce using rule 52 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 52 (expression -> expression | expression .) ]
  ! ^               [ reduce using rule 52 (expression -> expression | expression .) ]
  ! SHL             [ reduce using rule 52 (expression -> expression | expression .) ]
  ! SHR             [ reduce using rule 52 (expression -> expression | expression .) ]
  ! EQ              [ reduce using rule 52 (expression -> expression | expression .) ]
  ! NEQ             [ reduce using rule 52 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 52 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 52 (expression -> expression | expression .) ]
  ! LE              [ reduce using rule 52 (expression -> expression | expression .) ]
  ! GE              [ reduce using rule 52 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 67 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]


state 108

    (54) expression -> expression ^ expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    |               reduce using rule 54 (expression -> expression ^ expression .)
    ^               reduce using rule 54 (expression -> expression ^ expression .)
    AND             reduce using rule 54 (expression -> expression ^ expression .)
    OR              reduce using rule 54 (expression -> expression ^ expression .)
    ;               reduce using rule 54 (expression -> expression ^ expression .)
    ,               reduce using rule 54 (expression -> expression ^ expression .)
    )               reduce using rule 54 (expression -> expression ^ expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    &               shift and go to state 54
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64

  ! +               [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! %               [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! &               [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! SHL             [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! SHR             [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! EQ              [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! NEQ             [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! <               [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! LE              [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! GE              [ reduce using rule 54 (expression -> expression ^ expression .) ]
  ! |               [ shift and go to state 67 ]
  ! ^               [ shift and go to state 68 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 61 ]


state 109

    (40) compound_instr -> { anything_list } .

    TYPE            reduce using rule 40 (compound_instr -> { anything_list } .)
    error           reduce using rule 40 (compound_instr -> { anything_list } .)
    PRINT           reduce using rule 40 (compound_instr -> { anything_list } .)
    ID              reduce using rule 40 (compound_instr -> { anything_list } .)
    IF              reduce using rule 40 (compound_instr -> { anything_list } .)
    WHILE           reduce using rule 40 (compound_instr -> { anything_list } .)
    REPEAT          reduce using rule 40 (compound_instr -> { anything_list } .)
    RETURN          reduce using rule 40 (compound_instr -> { anything_list } .)
    BREAK           reduce using rule 40 (compound_instr -> { anything_list } .)
    CONTINUE        reduce using rule 40 (compound_instr -> { anything_list } .)
    {               reduce using rule 40 (compound_instr -> { anything_list } .)
    (               reduce using rule 40 (compound_instr -> { anything_list } .)
    INTEGER         reduce using rule 40 (compound_instr -> { anything_list } .)
    FLOAT           reduce using rule 40 (compound_instr -> { anything_list } .)
    STRING          reduce using rule 40 (compound_instr -> { anything_list } .)
    $end            reduce using rule 40 (compound_instr -> { anything_list } .)
    UNTIL           reduce using rule 40 (compound_instr -> { anything_list } .)
    }               reduce using rule 40 (compound_instr -> { anything_list } .)
    ELSE            reduce using rule 40 (compound_instr -> { anything_list } .)


state 110

    (10) declaration -> TYPE inits ; .

    UNTIL           reduce using rule 10 (declaration -> TYPE inits ; .)
    TYPE            reduce using rule 10 (declaration -> TYPE inits ; .)
    error           reduce using rule 10 (declaration -> TYPE inits ; .)
    PRINT           reduce using rule 10 (declaration -> TYPE inits ; .)
    ID              reduce using rule 10 (declaration -> TYPE inits ; .)
    IF              reduce using rule 10 (declaration -> TYPE inits ; .)
    WHILE           reduce using rule 10 (declaration -> TYPE inits ; .)
    REPEAT          reduce using rule 10 (declaration -> TYPE inits ; .)
    RETURN          reduce using rule 10 (declaration -> TYPE inits ; .)
    BREAK           reduce using rule 10 (declaration -> TYPE inits ; .)
    CONTINUE        reduce using rule 10 (declaration -> TYPE inits ; .)
    {               reduce using rule 10 (declaration -> TYPE inits ; .)
    (               reduce using rule 10 (declaration -> TYPE inits ; .)
    INTEGER         reduce using rule 10 (declaration -> TYPE inits ; .)
    FLOAT           reduce using rule 10 (declaration -> TYPE inits ; .)
    STRING          reduce using rule 10 (declaration -> TYPE inits ; .)
    }               reduce using rule 10 (declaration -> TYPE inits ; .)
    $end            reduce using rule 10 (declaration -> TYPE inits ; .)


state 111

    (12) inits -> inits , . init
    (14) init -> . ID = expression

    ID              shift and go to state 124

    init                           shift and go to state 123

state 112

    (73) fundef -> TYPE ID ( . args_list_or_empty ) compound_instr
    (74) args_list_or_empty -> . args_list
    (75) args_list_or_empty -> .
    (76) args_list -> . args_list , arg
    (77) args_list -> . arg
    (78) arg -> . TYPE ID

    )               reduce using rule 75 (args_list_or_empty -> .)
    TYPE            shift and go to state 128

    args_list_or_empty             shift and go to state 126
    arg                            shift and go to state 127
    args_list                      shift and go to state 125

state 113

    (14) init -> ID = . expression
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    const                          shift and go to state 8
    expression                     shift and go to state 129

state 114

    (71) expr_list -> expr_list , expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    ;               reduce using rule 71 (expr_list -> expr_list , expression .)
    ,               reduce using rule 71 (expr_list -> expr_list , expression .)
    )               reduce using rule 71 (expr_list -> expr_list , expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    |               shift and go to state 67
    &               shift and go to state 54
    ^               shift and go to state 68
    AND             shift and go to state 50
    OR              shift and go to state 61
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64


state 115

    (34) while_instr -> WHILE ( condition ) . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 17
    instruction                    shift and go to state 130
    compound_instr                 shift and go to state 19
    continue_instr                 shift and go to state 10
    labeled_instr                  shift and go to state 18
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 11
    expression                     shift and go to state 30

state 116

    (35) while_instr -> WHILE ( error ) . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 17
    instruction                    shift and go to state 131
    compound_instr                 shift and go to state 19
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    break_instr                    shift and go to state 24
    labeled_instr                  shift and go to state 18
    expression                     shift and go to state 30
    repeat_instr                   shift and go to state 6

state 117

    (36) repeat_instr -> REPEAT anything_list UNTIL condition . ;

    ;               shift and go to state 132


state 118

    (67) expression -> ID ( expr_list_or_empty ) .

    +               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    -               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    *               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    /               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    %               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    |               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    &               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    ^               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    AND             reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    OR              reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    SHL             reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    SHR             reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    EQ              reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    NEQ             reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    >               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    <               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    LE              reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    GE              reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    ;               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    ,               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)
    )               reduce using rule 67 (expression -> ID ( expr_list_or_empty ) .)


state 119

    (68) expression -> ID ( error ) .

    +               reduce using rule 68 (expression -> ID ( error ) .)
    -               reduce using rule 68 (expression -> ID ( error ) .)
    *               reduce using rule 68 (expression -> ID ( error ) .)
    /               reduce using rule 68 (expression -> ID ( error ) .)
    %               reduce using rule 68 (expression -> ID ( error ) .)
    |               reduce using rule 68 (expression -> ID ( error ) .)
    &               reduce using rule 68 (expression -> ID ( error ) .)
    ^               reduce using rule 68 (expression -> ID ( error ) .)
    AND             reduce using rule 68 (expression -> ID ( error ) .)
    OR              reduce using rule 68 (expression -> ID ( error ) .)
    SHL             reduce using rule 68 (expression -> ID ( error ) .)
    SHR             reduce using rule 68 (expression -> ID ( error ) .)
    EQ              reduce using rule 68 (expression -> ID ( error ) .)
    NEQ             reduce using rule 68 (expression -> ID ( error ) .)
    >               reduce using rule 68 (expression -> ID ( error ) .)
    <               reduce using rule 68 (expression -> ID ( error ) .)
    LE              reduce using rule 68 (expression -> ID ( error ) .)
    GE              reduce using rule 68 (expression -> ID ( error ) .)
    ;               reduce using rule 68 (expression -> ID ( error ) .)
    ,               reduce using rule 68 (expression -> ID ( error ) .)
    )               reduce using rule 68 (expression -> ID ( error ) .)


state 120

    (29) assignment -> ID = expression ; .

    TYPE            reduce using rule 29 (assignment -> ID = expression ; .)
    error           reduce using rule 29 (assignment -> ID = expression ; .)
    PRINT           reduce using rule 29 (assignment -> ID = expression ; .)
    ID              reduce using rule 29 (assignment -> ID = expression ; .)
    IF              reduce using rule 29 (assignment -> ID = expression ; .)
    WHILE           reduce using rule 29 (assignment -> ID = expression ; .)
    REPEAT          reduce using rule 29 (assignment -> ID = expression ; .)
    RETURN          reduce using rule 29 (assignment -> ID = expression ; .)
    BREAK           reduce using rule 29 (assignment -> ID = expression ; .)
    CONTINUE        reduce using rule 29 (assignment -> ID = expression ; .)
    {               reduce using rule 29 (assignment -> ID = expression ; .)
    (               reduce using rule 29 (assignment -> ID = expression ; .)
    INTEGER         reduce using rule 29 (assignment -> ID = expression ; .)
    FLOAT           reduce using rule 29 (assignment -> ID = expression ; .)
    STRING          reduce using rule 29 (assignment -> ID = expression ; .)
    $end            reduce using rule 29 (assignment -> ID = expression ; .)
    UNTIL           reduce using rule 29 (assignment -> ID = expression ; .)
    }               reduce using rule 29 (assignment -> ID = expression ; .)
    ELSE            reduce using rule 29 (assignment -> ID = expression ; .)


state 121

    (30) choice_instr -> IF ( condition ) . instruction
    (31) choice_instr -> IF ( condition ) . instruction ELSE instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 17
    instruction                    shift and go to state 133
    compound_instr                 shift and go to state 19
    continue_instr                 shift and go to state 10
    labeled_instr                  shift and go to state 18
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 11
    expression                     shift and go to state 30

state 122

    (32) choice_instr -> IF ( error ) . instruction
    (33) choice_instr -> IF ( error ) . instruction ELSE instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 17
    instruction                    shift and go to state 134
    compound_instr                 shift and go to state 19
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    break_instr                    shift and go to state 24
    labeled_instr                  shift and go to state 18
    expression                     shift and go to state 30
    repeat_instr                   shift and go to state 6

state 123

    (12) inits -> inits , init .

    ;               reduce using rule 12 (inits -> inits , init .)
    ,               reduce using rule 12 (inits -> inits , init .)


state 124

    (14) init -> ID . = expression

    =               shift and go to state 113


state 125

    (74) args_list_or_empty -> args_list .
    (76) args_list -> args_list . , arg

    )               reduce using rule 74 (args_list_or_empty -> args_list .)
    ,               shift and go to state 135


state 126

    (73) fundef -> TYPE ID ( args_list_or_empty . ) compound_instr

    )               shift and go to state 136


state 127

    (77) args_list -> arg .

    ,               reduce using rule 77 (args_list -> arg .)
    )               reduce using rule 77 (args_list -> arg .)


state 128

    (78) arg -> TYPE . ID

    ID              shift and go to state 137


state 129

    (14) init -> ID = expression .
    (47) expression -> expression . + expression
    (48) expression -> expression . - expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . % expression
    (52) expression -> expression . | expression
    (53) expression -> expression . & expression
    (54) expression -> expression . ^ expression
    (55) expression -> expression . AND expression
    (56) expression -> expression . OR expression
    (57) expression -> expression . SHL expression
    (58) expression -> expression . SHR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NEQ expression
    (61) expression -> expression . > expression
    (62) expression -> expression . < expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    ;               reduce using rule 14 (init -> ID = expression .)
    ,               reduce using rule 14 (init -> ID = expression .)
    +               shift and go to state 57
    -               shift and go to state 59
    *               shift and go to state 58
    /               shift and go to state 60
    %               shift and go to state 53
    |               shift and go to state 67
    &               shift and go to state 54
    ^               shift and go to state 68
    AND             shift and go to state 50
    OR              shift and go to state 61
    SHL             shift and go to state 56
    SHR             shift and go to state 51
    EQ              shift and go to state 62
    NEQ             shift and go to state 66
    >               shift and go to state 63
    <               shift and go to state 55
    LE              shift and go to state 52
    GE              shift and go to state 64


state 130

    (34) while_instr -> WHILE ( condition ) instruction .

    UNTIL           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    TYPE            reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    error           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    ID              reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    IF              reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    REPEAT          reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    {               reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    (               reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    INTEGER         reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    FLOAT           reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    STRING          reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    $end            reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    }               reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 34 (while_instr -> WHILE ( condition ) instruction .)


state 131

    (35) while_instr -> WHILE ( error ) instruction .

    UNTIL           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    TYPE            reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    error           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    PRINT           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    IF              reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    REPEAT          reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    (               reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    INTEGER         reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    FLOAT           reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    STRING          reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    }               reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 35 (while_instr -> WHILE ( error ) instruction .)


state 132

    (36) repeat_instr -> REPEAT anything_list UNTIL condition ; .

    TYPE            reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    error           reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    PRINT           reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    ID              reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    IF              reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    WHILE           reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    REPEAT          reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    RETURN          reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    BREAK           reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    CONTINUE        reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    {               reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    (               reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    INTEGER         reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    FLOAT           reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    STRING          reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    $end            reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    UNTIL           reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    }               reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    ELSE            reduce using rule 36 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)


state 133

    (30) choice_instr -> IF ( condition ) instruction .
    (31) choice_instr -> IF ( condition ) instruction . ELSE instruction

    TYPE            reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    error           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    PRINT           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    ID              reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    IF              reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    WHILE           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    REPEAT          reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    RETURN          reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    BREAK           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    {               reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    (               reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    INTEGER         reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    FLOAT           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    STRING          reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    $end            reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    UNTIL           reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    }               reduce using rule 30 (choice_instr -> IF ( condition ) instruction .)
    ELSE            shift and go to state 138

  ! ELSE            [ reduce using rule 30 (choice_instr -> IF ( condition ) instruction .) ]


state 134

    (32) choice_instr -> IF ( error ) instruction .
    (33) choice_instr -> IF ( error ) instruction . ELSE instruction

    TYPE            reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    error           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    PRINT           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    ID              reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    IF              reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    REPEAT          reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    {               reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    (               reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    INTEGER         reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    FLOAT           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    STRING          reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    $end            reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    UNTIL           reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    }               reduce using rule 32 (choice_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 139

  ! ELSE            [ reduce using rule 32 (choice_instr -> IF ( error ) instruction .) ]


state 135

    (76) args_list -> args_list , . arg
    (78) arg -> . TYPE ID

    TYPE            shift and go to state 128

    arg                            shift and go to state 140

state 136

    (73) fundef -> TYPE ID ( args_list_or_empty ) . compound_instr
    (40) compound_instr -> . { anything_list }

    {               shift and go to state 32

    compound_instr                 shift and go to state 141

state 137

    (78) arg -> TYPE ID .

    ,               reduce using rule 78 (arg -> TYPE ID .)
    )               reduce using rule 78 (arg -> TYPE ID .)


state 138

    (31) choice_instr -> IF ( condition ) instruction ELSE . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 17
    instruction                    shift and go to state 142
    compound_instr                 shift and go to state 19
    continue_instr                 shift and go to state 10
    labeled_instr                  shift and go to state 18
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    break_instr                    shift and go to state 24
    while_instr                    shift and go to state 11
    expression                     shift and go to state 30

state 139

    (33) choice_instr -> IF ( error ) instruction ELSE . instruction
    (15) instruction -> . print_instr
    (16) instruction -> . labeled_instr
    (17) instruction -> . assignment
    (18) instruction -> . choice_instr
    (19) instruction -> . while_instr
    (20) instruction -> . repeat_instr
    (21) instruction -> . return_instr
    (22) instruction -> . break_instr
    (23) instruction -> . continue_instr
    (24) instruction -> . compound_instr
    (25) instruction -> . expression ;
    (26) print_instr -> . PRINT expr_list ;
    (27) print_instr -> . PRINT error ;
    (28) labeled_instr -> . ID : instruction
    (29) assignment -> . ID = expression ;
    (30) choice_instr -> . IF ( condition ) instruction
    (31) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (32) choice_instr -> . IF ( error ) instruction
    (33) choice_instr -> . IF ( error ) instruction ELSE instruction
    (34) while_instr -> . WHILE ( condition ) instruction
    (35) while_instr -> . WHILE ( error ) instruction
    (36) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (37) return_instr -> . RETURN expression ;
    (39) break_instr -> . BREAK ;
    (38) continue_instr -> . CONTINUE ;
    (40) compound_instr -> . { anything_list }
    (45) expression -> . const
    (46) expression -> . ID
    (47) expression -> . expression + expression
    (48) expression -> . expression - expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression % expression
    (52) expression -> . expression | expression
    (53) expression -> . expression & expression
    (54) expression -> . expression ^ expression
    (55) expression -> . expression AND expression
    (56) expression -> . expression OR expression
    (57) expression -> . expression SHL expression
    (58) expression -> . expression SHR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NEQ expression
    (61) expression -> . expression > expression
    (62) expression -> . expression < expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) expression -> . ( expression )
    (66) expression -> . ( error )
    (67) expression -> . ID ( expr_list_or_empty )
    (68) expression -> . ID ( error )
    (42) const -> . INTEGER
    (43) const -> . FLOAT
    (44) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 16

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 17
    instruction                    shift and go to state 143
    compound_instr                 shift and go to state 19
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    break_instr                    shift and go to state 24
    labeled_instr                  shift and go to state 18
    expression                     shift and go to state 30
    repeat_instr                   shift and go to state 6

state 140

    (76) args_list -> args_list , arg .

    ,               reduce using rule 76 (args_list -> args_list , arg .)
    )               reduce using rule 76 (args_list -> args_list , arg .)


state 141

    (73) fundef -> TYPE ID ( args_list_or_empty ) compound_instr .

    TYPE            reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    error           reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    PRINT           reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    ID              reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    IF              reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    WHILE           reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    REPEAT          reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    RETURN          reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    BREAK           reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    CONTINUE        reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    {               reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    (               reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    INTEGER         reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    FLOAT           reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    STRING          reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    $end            reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    UNTIL           reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    }               reduce using rule 73 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)


state 142

    (31) choice_instr -> IF ( condition ) instruction ELSE instruction .

    TYPE            reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    error           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    REPEAT          reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    (               reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    INTEGER         reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    FLOAT           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    STRING          reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    UNTIL           reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 31 (choice_instr -> IF ( condition ) instruction ELSE instruction .)


state 143

    (33) choice_instr -> IF ( error ) instruction ELSE instruction .

    TYPE            reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    error           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    PRINT           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    IF              reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    REPEAT          reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    (               reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    INTEGER         reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    FLOAT           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    STRING          reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    UNTIL           reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    }               reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 33 (choice_instr -> IF ( error ) instruction ELSE instruction .)

