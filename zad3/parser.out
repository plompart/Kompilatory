Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> anything_list
Rule 2     anything_list -> anything_list anything
Rule 3     anything_list -> <empty>
Rule 4     anything -> declarations
Rule 5     anything -> fundef
Rule 6     anything -> instruction
Rule 7     declarations -> declarations declaration
Rule 8     declarations -> declaration
Rule 9     declaration -> TYPE inits ;
Rule 10    declaration -> error ;
Rule 11    inits -> inits , init
Rule 12    inits -> init
Rule 13    init -> ID = expression
Rule 14    instruction -> print_instr
Rule 15    instruction -> labeled_instr
Rule 16    instruction -> assignment
Rule 17    instruction -> choice_instr
Rule 18    instruction -> while_instr
Rule 19    instruction -> repeat_instr
Rule 20    instruction -> return_instr
Rule 21    instruction -> break_instr
Rule 22    instruction -> continue_instr
Rule 23    instruction -> compound_instr
Rule 24    instruction -> expression ;
Rule 25    print_instr -> PRINT expr_list ;
Rule 26    print_instr -> PRINT error ;
Rule 27    labeled_instr -> ID : instruction
Rule 28    assignment -> ID = expression ;
Rule 29    choice_instr -> IF ( condition ) instruction
Rule 30    choice_instr -> IF ( condition ) instruction ELSE instruction
Rule 31    choice_instr -> IF ( error ) instruction
Rule 32    choice_instr -> IF ( error ) instruction ELSE instruction
Rule 33    while_instr -> WHILE ( condition ) instruction
Rule 34    while_instr -> WHILE ( error ) instruction
Rule 35    repeat_instr -> REPEAT anything_list UNTIL condition ;
Rule 36    return_instr -> RETURN expression ;
Rule 37    continue_instr -> CONTINUE ;
Rule 38    break_instr -> BREAK ;
Rule 39    compound_instr -> { anything_list }
Rule 40    condition -> expression
Rule 41    const -> INTEGER
Rule 42    const -> FLOAT
Rule 43    const -> STRING
Rule 44    expression -> ID
Rule 45    expression -> const
Rule 46    expression -> expression + expression
Rule 47    expression -> expression - expression
Rule 48    expression -> expression * expression
Rule 49    expression -> expression / expression
Rule 50    expression -> expression % expression
Rule 51    expression -> expression | expression
Rule 52    expression -> expression & expression
Rule 53    expression -> expression ^ expression
Rule 54    expression -> expression AND expression
Rule 55    expression -> expression OR expression
Rule 56    expression -> expression SHL expression
Rule 57    expression -> expression SHR expression
Rule 58    expression -> expression EQ expression
Rule 59    expression -> expression NEQ expression
Rule 60    expression -> expression > expression
Rule 61    expression -> expression < expression
Rule 62    expression -> expression LE expression
Rule 63    expression -> expression GE expression
Rule 64    expression -> ( expression )
Rule 65    expression -> ( error )
Rule 66    expression -> ID ( expr_list_or_empty )
Rule 67    expression -> ID ( error )
Rule 68    expr_list_or_empty -> expr_list
Rule 69    expr_list_or_empty -> <empty>
Rule 70    expr_list -> expr_list , expression
Rule 71    expr_list -> expression
Rule 72    fundef -> TYPE ID ( args_list_or_empty ) compound_instr
Rule 73    args_list_or_empty -> args_list
Rule 74    args_list_or_empty -> <empty>
Rule 75    args_list -> args_list , arg
Rule 76    args_list -> arg
Rule 77    arg -> TYPE ID

Terminals, with rules where they appear

%                    : 50
&                    : 52
(                    : 29 30 31 32 33 34 64 65 66 67 72
)                    : 29 30 31 32 33 34 64 65 66 67 72
*                    : 48
+                    : 46
,                    : 11 70 75
-                    : 47
/                    : 49
:                    : 27
;                    : 9 10 24 25 26 28 35 36 37 38
<                    : 61
=                    : 13 28
>                    : 60
AND                  : 54
BREAK                : 38
CONTINUE             : 37
ELSE                 : 30 32
EQ                   : 58
FLOAT                : 42
GE                   : 63
ID                   : 13 27 28 44 66 67 72 77
IF                   : 29 30 31 32
INTEGER              : 41
LE                   : 62
NEQ                  : 59
OR                   : 55
PRINT                : 25 26
REPEAT               : 35
RETURN               : 36
SHL                  : 56
SHR                  : 57
STRING               : 43
TYPE                 : 9 72 77
UNTIL                : 35
WHILE                : 33 34
^                    : 53
error                : 10 26 31 32 34 65 67
{                    : 39
|                    : 51
}                    : 39

Nonterminals, with rules where they appear

anything             : 2
anything_list        : 1 2 35 39
arg                  : 75 76
args_list            : 73 75
args_list_or_empty   : 72
assignment           : 16
break_instr          : 21
choice_instr         : 17
compound_instr       : 23 72
condition            : 29 30 33 35
const                : 45
continue_instr       : 22
declaration          : 7 8
declarations         : 4 7
expr_list            : 25 68 70
expr_list_or_empty   : 66
expression           : 13 24 28 36 40 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 70 71
fundef               : 5
init                 : 11 12
inits                : 9 11
instruction          : 6 27 29 30 30 31 32 32 33 34
labeled_instr        : 15
print_instr          : 14
program              : 0
repeat_instr         : 19
return_instr         : 20
while_instr          : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . anything_list
    (2) anything_list -> . anything_list anything
    (3) anything_list -> .

    TYPE            reduce using rule 3 (anything_list -> .)
    error           reduce using rule 3 (anything_list -> .)
    PRINT           reduce using rule 3 (anything_list -> .)
    ID              reduce using rule 3 (anything_list -> .)
    IF              reduce using rule 3 (anything_list -> .)
    WHILE           reduce using rule 3 (anything_list -> .)
    REPEAT          reduce using rule 3 (anything_list -> .)
    RETURN          reduce using rule 3 (anything_list -> .)
    BREAK           reduce using rule 3 (anything_list -> .)
    CONTINUE        reduce using rule 3 (anything_list -> .)
    {               reduce using rule 3 (anything_list -> .)
    (               reduce using rule 3 (anything_list -> .)
    INTEGER         reduce using rule 3 (anything_list -> .)
    FLOAT           reduce using rule 3 (anything_list -> .)
    STRING          reduce using rule 3 (anything_list -> .)
    $end            reduce using rule 3 (anything_list -> .)

    anything_list                  shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> anything_list .
    (2) anything_list -> anything_list . anything
    (4) anything -> . declarations
    (5) anything -> . fundef
    (6) anything -> . instruction
    (7) declarations -> . declarations declaration
    (8) declarations -> . declaration
    (72) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (9) declaration -> . TYPE inits ;
    (10) declaration -> . error ;
    (25) print_instr -> . PRINT expr_list ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { anything_list }
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    $end            reduce using rule 1 (program -> anything_list .)
    TYPE            shift and go to state 32
    error           shift and go to state 31
    PRINT           shift and go to state 6
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 7
    REPEAT          shift and go to state 16
    RETURN          shift and go to state 4
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 30
    {               shift and go to state 33
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    declarations                   shift and go to state 3
    choice_instr                   shift and go to state 5
    repeat_instr                   shift and go to state 8
    return_instr                   shift and go to state 9
    const                          shift and go to state 10
    continue_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    assignment                     shift and go to state 18
    labeled_instr                  shift and go to state 19
    compound_instr                 shift and go to state 20
    declaration                    shift and go to state 21
    anything                       shift and go to state 25
    break_instr                    shift and go to state 26
    instruction                    shift and go to state 27
    fundef                         shift and go to state 28
    print_instr                    shift and go to state 29
    expression                     shift and go to state 34

state 2

    (0) S' -> program .



state 3

    (4) anything -> declarations .
    (7) declarations -> declarations . declaration
    (9) declaration -> . TYPE inits ;
    (10) declaration -> . error ;

    }               reduce using rule 4 (anything -> declarations .)
    TYPE            reduce using rule 4 (anything -> declarations .)
    error           reduce using rule 4 (anything -> declarations .)
    PRINT           reduce using rule 4 (anything -> declarations .)
    ID              reduce using rule 4 (anything -> declarations .)
    IF              reduce using rule 4 (anything -> declarations .)
    WHILE           reduce using rule 4 (anything -> declarations .)
    REPEAT          reduce using rule 4 (anything -> declarations .)
    RETURN          reduce using rule 4 (anything -> declarations .)
    BREAK           reduce using rule 4 (anything -> declarations .)
    CONTINUE        reduce using rule 4 (anything -> declarations .)
    {               reduce using rule 4 (anything -> declarations .)
    (               reduce using rule 4 (anything -> declarations .)
    INTEGER         reduce using rule 4 (anything -> declarations .)
    FLOAT           reduce using rule 4 (anything -> declarations .)
    STRING          reduce using rule 4 (anything -> declarations .)
    UNTIL           reduce using rule 4 (anything -> declarations .)
    $end            reduce using rule 4 (anything -> declarations .)

  ! TYPE            [ shift and go to state 36 ]
  ! error           [ shift and go to state 31 ]

    declaration                    shift and go to state 35

state 4

    (36) return_instr -> RETURN . expression ;
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 38

state 5

    (17) instruction -> choice_instr .

    TYPE            reduce using rule 17 (instruction -> choice_instr .)
    error           reduce using rule 17 (instruction -> choice_instr .)
    PRINT           reduce using rule 17 (instruction -> choice_instr .)
    ID              reduce using rule 17 (instruction -> choice_instr .)
    IF              reduce using rule 17 (instruction -> choice_instr .)
    WHILE           reduce using rule 17 (instruction -> choice_instr .)
    REPEAT          reduce using rule 17 (instruction -> choice_instr .)
    RETURN          reduce using rule 17 (instruction -> choice_instr .)
    BREAK           reduce using rule 17 (instruction -> choice_instr .)
    CONTINUE        reduce using rule 17 (instruction -> choice_instr .)
    {               reduce using rule 17 (instruction -> choice_instr .)
    (               reduce using rule 17 (instruction -> choice_instr .)
    INTEGER         reduce using rule 17 (instruction -> choice_instr .)
    FLOAT           reduce using rule 17 (instruction -> choice_instr .)
    STRING          reduce using rule 17 (instruction -> choice_instr .)
    $end            reduce using rule 17 (instruction -> choice_instr .)
    UNTIL           reduce using rule 17 (instruction -> choice_instr .)
    }               reduce using rule 17 (instruction -> choice_instr .)
    ELSE            reduce using rule 17 (instruction -> choice_instr .)


state 6

    (25) print_instr -> PRINT . expr_list ;
    (26) print_instr -> PRINT . error ;
    (70) expr_list -> . expr_list , expression
    (71) expr_list -> . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    error           shift and go to state 40
    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    expr_list                      shift and go to state 39
    expression                     shift and go to state 41
    const                          shift and go to state 10

state 7

    (33) while_instr -> WHILE . ( condition ) instruction
    (34) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 42


state 8

    (19) instruction -> repeat_instr .

    TYPE            reduce using rule 19 (instruction -> repeat_instr .)
    error           reduce using rule 19 (instruction -> repeat_instr .)
    PRINT           reduce using rule 19 (instruction -> repeat_instr .)
    ID              reduce using rule 19 (instruction -> repeat_instr .)
    IF              reduce using rule 19 (instruction -> repeat_instr .)
    WHILE           reduce using rule 19 (instruction -> repeat_instr .)
    REPEAT          reduce using rule 19 (instruction -> repeat_instr .)
    RETURN          reduce using rule 19 (instruction -> repeat_instr .)
    BREAK           reduce using rule 19 (instruction -> repeat_instr .)
    CONTINUE        reduce using rule 19 (instruction -> repeat_instr .)
    {               reduce using rule 19 (instruction -> repeat_instr .)
    (               reduce using rule 19 (instruction -> repeat_instr .)
    INTEGER         reduce using rule 19 (instruction -> repeat_instr .)
    FLOAT           reduce using rule 19 (instruction -> repeat_instr .)
    STRING          reduce using rule 19 (instruction -> repeat_instr .)
    $end            reduce using rule 19 (instruction -> repeat_instr .)
    UNTIL           reduce using rule 19 (instruction -> repeat_instr .)
    }               reduce using rule 19 (instruction -> repeat_instr .)
    ELSE            reduce using rule 19 (instruction -> repeat_instr .)


state 9

    (20) instruction -> return_instr .

    TYPE            reduce using rule 20 (instruction -> return_instr .)
    error           reduce using rule 20 (instruction -> return_instr .)
    PRINT           reduce using rule 20 (instruction -> return_instr .)
    ID              reduce using rule 20 (instruction -> return_instr .)
    IF              reduce using rule 20 (instruction -> return_instr .)
    WHILE           reduce using rule 20 (instruction -> return_instr .)
    REPEAT          reduce using rule 20 (instruction -> return_instr .)
    RETURN          reduce using rule 20 (instruction -> return_instr .)
    BREAK           reduce using rule 20 (instruction -> return_instr .)
    CONTINUE        reduce using rule 20 (instruction -> return_instr .)
    {               reduce using rule 20 (instruction -> return_instr .)
    (               reduce using rule 20 (instruction -> return_instr .)
    INTEGER         reduce using rule 20 (instruction -> return_instr .)
    FLOAT           reduce using rule 20 (instruction -> return_instr .)
    STRING          reduce using rule 20 (instruction -> return_instr .)
    $end            reduce using rule 20 (instruction -> return_instr .)
    UNTIL           reduce using rule 20 (instruction -> return_instr .)
    }               reduce using rule 20 (instruction -> return_instr .)
    ELSE            reduce using rule 20 (instruction -> return_instr .)


state 10

    (45) expression -> const .

    +               reduce using rule 45 (expression -> const .)
    -               reduce using rule 45 (expression -> const .)
    *               reduce using rule 45 (expression -> const .)
    /               reduce using rule 45 (expression -> const .)
    %               reduce using rule 45 (expression -> const .)
    |               reduce using rule 45 (expression -> const .)
    &               reduce using rule 45 (expression -> const .)
    ^               reduce using rule 45 (expression -> const .)
    AND             reduce using rule 45 (expression -> const .)
    OR              reduce using rule 45 (expression -> const .)
    SHL             reduce using rule 45 (expression -> const .)
    SHR             reduce using rule 45 (expression -> const .)
    EQ              reduce using rule 45 (expression -> const .)
    NEQ             reduce using rule 45 (expression -> const .)
    >               reduce using rule 45 (expression -> const .)
    <               reduce using rule 45 (expression -> const .)
    LE              reduce using rule 45 (expression -> const .)
    GE              reduce using rule 45 (expression -> const .)
    ;               reduce using rule 45 (expression -> const .)
    ,               reduce using rule 45 (expression -> const .)
    )               reduce using rule 45 (expression -> const .)


state 11

    (64) expression -> ( . expression )
    (65) expression -> ( . error )
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    error           shift and go to state 43
    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 44

state 12

    (22) instruction -> continue_instr .

    TYPE            reduce using rule 22 (instruction -> continue_instr .)
    error           reduce using rule 22 (instruction -> continue_instr .)
    PRINT           reduce using rule 22 (instruction -> continue_instr .)
    ID              reduce using rule 22 (instruction -> continue_instr .)
    IF              reduce using rule 22 (instruction -> continue_instr .)
    WHILE           reduce using rule 22 (instruction -> continue_instr .)
    REPEAT          reduce using rule 22 (instruction -> continue_instr .)
    RETURN          reduce using rule 22 (instruction -> continue_instr .)
    BREAK           reduce using rule 22 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 22 (instruction -> continue_instr .)
    {               reduce using rule 22 (instruction -> continue_instr .)
    (               reduce using rule 22 (instruction -> continue_instr .)
    INTEGER         reduce using rule 22 (instruction -> continue_instr .)
    FLOAT           reduce using rule 22 (instruction -> continue_instr .)
    STRING          reduce using rule 22 (instruction -> continue_instr .)
    $end            reduce using rule 22 (instruction -> continue_instr .)
    UNTIL           reduce using rule 22 (instruction -> continue_instr .)
    }               reduce using rule 22 (instruction -> continue_instr .)
    ELSE            reduce using rule 22 (instruction -> continue_instr .)


state 13

    (18) instruction -> while_instr .

    TYPE            reduce using rule 18 (instruction -> while_instr .)
    error           reduce using rule 18 (instruction -> while_instr .)
    PRINT           reduce using rule 18 (instruction -> while_instr .)
    ID              reduce using rule 18 (instruction -> while_instr .)
    IF              reduce using rule 18 (instruction -> while_instr .)
    WHILE           reduce using rule 18 (instruction -> while_instr .)
    REPEAT          reduce using rule 18 (instruction -> while_instr .)
    RETURN          reduce using rule 18 (instruction -> while_instr .)
    BREAK           reduce using rule 18 (instruction -> while_instr .)
    CONTINUE        reduce using rule 18 (instruction -> while_instr .)
    {               reduce using rule 18 (instruction -> while_instr .)
    (               reduce using rule 18 (instruction -> while_instr .)
    INTEGER         reduce using rule 18 (instruction -> while_instr .)
    FLOAT           reduce using rule 18 (instruction -> while_instr .)
    STRING          reduce using rule 18 (instruction -> while_instr .)
    $end            reduce using rule 18 (instruction -> while_instr .)
    UNTIL           reduce using rule 18 (instruction -> while_instr .)
    }               reduce using rule 18 (instruction -> while_instr .)
    ELSE            reduce using rule 18 (instruction -> while_instr .)


state 14

    (41) const -> INTEGER .

    ;               reduce using rule 41 (const -> INTEGER .)
    +               reduce using rule 41 (const -> INTEGER .)
    -               reduce using rule 41 (const -> INTEGER .)
    *               reduce using rule 41 (const -> INTEGER .)
    /               reduce using rule 41 (const -> INTEGER .)
    %               reduce using rule 41 (const -> INTEGER .)
    |               reduce using rule 41 (const -> INTEGER .)
    &               reduce using rule 41 (const -> INTEGER .)
    ^               reduce using rule 41 (const -> INTEGER .)
    AND             reduce using rule 41 (const -> INTEGER .)
    OR              reduce using rule 41 (const -> INTEGER .)
    SHL             reduce using rule 41 (const -> INTEGER .)
    SHR             reduce using rule 41 (const -> INTEGER .)
    EQ              reduce using rule 41 (const -> INTEGER .)
    NEQ             reduce using rule 41 (const -> INTEGER .)
    >               reduce using rule 41 (const -> INTEGER .)
    <               reduce using rule 41 (const -> INTEGER .)
    LE              reduce using rule 41 (const -> INTEGER .)
    GE              reduce using rule 41 (const -> INTEGER .)
    ,               reduce using rule 41 (const -> INTEGER .)
    )               reduce using rule 41 (const -> INTEGER .)


state 15

    (38) break_instr -> BREAK . ;

    ;               shift and go to state 45


state 16

    (35) repeat_instr -> REPEAT . anything_list UNTIL condition ;
    (2) anything_list -> . anything_list anything
    (3) anything_list -> .

    UNTIL           reduce using rule 3 (anything_list -> .)
    TYPE            reduce using rule 3 (anything_list -> .)
    error           reduce using rule 3 (anything_list -> .)
    PRINT           reduce using rule 3 (anything_list -> .)
    ID              reduce using rule 3 (anything_list -> .)
    IF              reduce using rule 3 (anything_list -> .)
    WHILE           reduce using rule 3 (anything_list -> .)
    REPEAT          reduce using rule 3 (anything_list -> .)
    RETURN          reduce using rule 3 (anything_list -> .)
    BREAK           reduce using rule 3 (anything_list -> .)
    CONTINUE        reduce using rule 3 (anything_list -> .)
    {               reduce using rule 3 (anything_list -> .)
    (               reduce using rule 3 (anything_list -> .)
    INTEGER         reduce using rule 3 (anything_list -> .)
    FLOAT           reduce using rule 3 (anything_list -> .)
    STRING          reduce using rule 3 (anything_list -> .)

    anything_list                  shift and go to state 46

state 17

    (43) const -> STRING .

    ;               reduce using rule 43 (const -> STRING .)
    +               reduce using rule 43 (const -> STRING .)
    -               reduce using rule 43 (const -> STRING .)
    *               reduce using rule 43 (const -> STRING .)
    /               reduce using rule 43 (const -> STRING .)
    %               reduce using rule 43 (const -> STRING .)
    |               reduce using rule 43 (const -> STRING .)
    &               reduce using rule 43 (const -> STRING .)
    ^               reduce using rule 43 (const -> STRING .)
    AND             reduce using rule 43 (const -> STRING .)
    OR              reduce using rule 43 (const -> STRING .)
    SHL             reduce using rule 43 (const -> STRING .)
    SHR             reduce using rule 43 (const -> STRING .)
    EQ              reduce using rule 43 (const -> STRING .)
    NEQ             reduce using rule 43 (const -> STRING .)
    >               reduce using rule 43 (const -> STRING .)
    <               reduce using rule 43 (const -> STRING .)
    LE              reduce using rule 43 (const -> STRING .)
    GE              reduce using rule 43 (const -> STRING .)
    ,               reduce using rule 43 (const -> STRING .)
    )               reduce using rule 43 (const -> STRING .)


state 18

    (16) instruction -> assignment .

    TYPE            reduce using rule 16 (instruction -> assignment .)
    error           reduce using rule 16 (instruction -> assignment .)
    PRINT           reduce using rule 16 (instruction -> assignment .)
    ID              reduce using rule 16 (instruction -> assignment .)
    IF              reduce using rule 16 (instruction -> assignment .)
    WHILE           reduce using rule 16 (instruction -> assignment .)
    REPEAT          reduce using rule 16 (instruction -> assignment .)
    RETURN          reduce using rule 16 (instruction -> assignment .)
    BREAK           reduce using rule 16 (instruction -> assignment .)
    CONTINUE        reduce using rule 16 (instruction -> assignment .)
    {               reduce using rule 16 (instruction -> assignment .)
    (               reduce using rule 16 (instruction -> assignment .)
    INTEGER         reduce using rule 16 (instruction -> assignment .)
    FLOAT           reduce using rule 16 (instruction -> assignment .)
    STRING          reduce using rule 16 (instruction -> assignment .)
    $end            reduce using rule 16 (instruction -> assignment .)
    UNTIL           reduce using rule 16 (instruction -> assignment .)
    }               reduce using rule 16 (instruction -> assignment .)
    ELSE            reduce using rule 16 (instruction -> assignment .)


state 19

    (15) instruction -> labeled_instr .

    TYPE            reduce using rule 15 (instruction -> labeled_instr .)
    error           reduce using rule 15 (instruction -> labeled_instr .)
    PRINT           reduce using rule 15 (instruction -> labeled_instr .)
    ID              reduce using rule 15 (instruction -> labeled_instr .)
    IF              reduce using rule 15 (instruction -> labeled_instr .)
    WHILE           reduce using rule 15 (instruction -> labeled_instr .)
    REPEAT          reduce using rule 15 (instruction -> labeled_instr .)
    RETURN          reduce using rule 15 (instruction -> labeled_instr .)
    BREAK           reduce using rule 15 (instruction -> labeled_instr .)
    CONTINUE        reduce using rule 15 (instruction -> labeled_instr .)
    {               reduce using rule 15 (instruction -> labeled_instr .)
    (               reduce using rule 15 (instruction -> labeled_instr .)
    INTEGER         reduce using rule 15 (instruction -> labeled_instr .)
    FLOAT           reduce using rule 15 (instruction -> labeled_instr .)
    STRING          reduce using rule 15 (instruction -> labeled_instr .)
    $end            reduce using rule 15 (instruction -> labeled_instr .)
    UNTIL           reduce using rule 15 (instruction -> labeled_instr .)
    }               reduce using rule 15 (instruction -> labeled_instr .)
    ELSE            reduce using rule 15 (instruction -> labeled_instr .)


state 20

    (23) instruction -> compound_instr .

    TYPE            reduce using rule 23 (instruction -> compound_instr .)
    error           reduce using rule 23 (instruction -> compound_instr .)
    PRINT           reduce using rule 23 (instruction -> compound_instr .)
    ID              reduce using rule 23 (instruction -> compound_instr .)
    IF              reduce using rule 23 (instruction -> compound_instr .)
    WHILE           reduce using rule 23 (instruction -> compound_instr .)
    REPEAT          reduce using rule 23 (instruction -> compound_instr .)
    RETURN          reduce using rule 23 (instruction -> compound_instr .)
    BREAK           reduce using rule 23 (instruction -> compound_instr .)
    CONTINUE        reduce using rule 23 (instruction -> compound_instr .)
    {               reduce using rule 23 (instruction -> compound_instr .)
    (               reduce using rule 23 (instruction -> compound_instr .)
    INTEGER         reduce using rule 23 (instruction -> compound_instr .)
    FLOAT           reduce using rule 23 (instruction -> compound_instr .)
    STRING          reduce using rule 23 (instruction -> compound_instr .)
    $end            reduce using rule 23 (instruction -> compound_instr .)
    UNTIL           reduce using rule 23 (instruction -> compound_instr .)
    }               reduce using rule 23 (instruction -> compound_instr .)
    ELSE            reduce using rule 23 (instruction -> compound_instr .)


state 21

    (8) declarations -> declaration .

    TYPE            reduce using rule 8 (declarations -> declaration .)
    error           reduce using rule 8 (declarations -> declaration .)
    PRINT           reduce using rule 8 (declarations -> declaration .)
    ID              reduce using rule 8 (declarations -> declaration .)
    IF              reduce using rule 8 (declarations -> declaration .)
    WHILE           reduce using rule 8 (declarations -> declaration .)
    REPEAT          reduce using rule 8 (declarations -> declaration .)
    RETURN          reduce using rule 8 (declarations -> declaration .)
    BREAK           reduce using rule 8 (declarations -> declaration .)
    CONTINUE        reduce using rule 8 (declarations -> declaration .)
    {               reduce using rule 8 (declarations -> declaration .)
    (               reduce using rule 8 (declarations -> declaration .)
    INTEGER         reduce using rule 8 (declarations -> declaration .)
    FLOAT           reduce using rule 8 (declarations -> declaration .)
    STRING          reduce using rule 8 (declarations -> declaration .)
    $end            reduce using rule 8 (declarations -> declaration .)
    }               reduce using rule 8 (declarations -> declaration .)
    UNTIL           reduce using rule 8 (declarations -> declaration .)


state 22

    (27) labeled_instr -> ID . : instruction
    (28) assignment -> ID . = expression ;
    (44) expression -> ID .
    (66) expression -> ID . ( expr_list_or_empty )
    (67) expression -> ID . ( error )

    :               shift and go to state 48
    =               shift and go to state 49
    ;               reduce using rule 44 (expression -> ID .)
    +               reduce using rule 44 (expression -> ID .)
    -               reduce using rule 44 (expression -> ID .)
    *               reduce using rule 44 (expression -> ID .)
    /               reduce using rule 44 (expression -> ID .)
    %               reduce using rule 44 (expression -> ID .)
    |               reduce using rule 44 (expression -> ID .)
    &               reduce using rule 44 (expression -> ID .)
    ^               reduce using rule 44 (expression -> ID .)
    AND             reduce using rule 44 (expression -> ID .)
    OR              reduce using rule 44 (expression -> ID .)
    SHL             reduce using rule 44 (expression -> ID .)
    SHR             reduce using rule 44 (expression -> ID .)
    EQ              reduce using rule 44 (expression -> ID .)
    NEQ             reduce using rule 44 (expression -> ID .)
    >               reduce using rule 44 (expression -> ID .)
    <               reduce using rule 44 (expression -> ID .)
    LE              reduce using rule 44 (expression -> ID .)
    GE              reduce using rule 44 (expression -> ID .)
    (               shift and go to state 47


state 23

    (29) choice_instr -> IF . ( condition ) instruction
    (30) choice_instr -> IF . ( condition ) instruction ELSE instruction
    (31) choice_instr -> IF . ( error ) instruction
    (32) choice_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 50


state 24

    (42) const -> FLOAT .

    ;               reduce using rule 42 (const -> FLOAT .)
    +               reduce using rule 42 (const -> FLOAT .)
    -               reduce using rule 42 (const -> FLOAT .)
    *               reduce using rule 42 (const -> FLOAT .)
    /               reduce using rule 42 (const -> FLOAT .)
    %               reduce using rule 42 (const -> FLOAT .)
    |               reduce using rule 42 (const -> FLOAT .)
    &               reduce using rule 42 (const -> FLOAT .)
    ^               reduce using rule 42 (const -> FLOAT .)
    AND             reduce using rule 42 (const -> FLOAT .)
    OR              reduce using rule 42 (const -> FLOAT .)
    SHL             reduce using rule 42 (const -> FLOAT .)
    SHR             reduce using rule 42 (const -> FLOAT .)
    EQ              reduce using rule 42 (const -> FLOAT .)
    NEQ             reduce using rule 42 (const -> FLOAT .)
    >               reduce using rule 42 (const -> FLOAT .)
    <               reduce using rule 42 (const -> FLOAT .)
    LE              reduce using rule 42 (const -> FLOAT .)
    GE              reduce using rule 42 (const -> FLOAT .)
    ,               reduce using rule 42 (const -> FLOAT .)
    )               reduce using rule 42 (const -> FLOAT .)


state 25

    (2) anything_list -> anything_list anything .

    UNTIL           reduce using rule 2 (anything_list -> anything_list anything .)
    TYPE            reduce using rule 2 (anything_list -> anything_list anything .)
    error           reduce using rule 2 (anything_list -> anything_list anything .)
    PRINT           reduce using rule 2 (anything_list -> anything_list anything .)
    ID              reduce using rule 2 (anything_list -> anything_list anything .)
    IF              reduce using rule 2 (anything_list -> anything_list anything .)
    WHILE           reduce using rule 2 (anything_list -> anything_list anything .)
    REPEAT          reduce using rule 2 (anything_list -> anything_list anything .)
    RETURN          reduce using rule 2 (anything_list -> anything_list anything .)
    BREAK           reduce using rule 2 (anything_list -> anything_list anything .)
    CONTINUE        reduce using rule 2 (anything_list -> anything_list anything .)
    {               reduce using rule 2 (anything_list -> anything_list anything .)
    (               reduce using rule 2 (anything_list -> anything_list anything .)
    INTEGER         reduce using rule 2 (anything_list -> anything_list anything .)
    FLOAT           reduce using rule 2 (anything_list -> anything_list anything .)
    STRING          reduce using rule 2 (anything_list -> anything_list anything .)
    }               reduce using rule 2 (anything_list -> anything_list anything .)
    $end            reduce using rule 2 (anything_list -> anything_list anything .)


state 26

    (21) instruction -> break_instr .

    TYPE            reduce using rule 21 (instruction -> break_instr .)
    error           reduce using rule 21 (instruction -> break_instr .)
    PRINT           reduce using rule 21 (instruction -> break_instr .)
    ID              reduce using rule 21 (instruction -> break_instr .)
    IF              reduce using rule 21 (instruction -> break_instr .)
    WHILE           reduce using rule 21 (instruction -> break_instr .)
    REPEAT          reduce using rule 21 (instruction -> break_instr .)
    RETURN          reduce using rule 21 (instruction -> break_instr .)
    BREAK           reduce using rule 21 (instruction -> break_instr .)
    CONTINUE        reduce using rule 21 (instruction -> break_instr .)
    {               reduce using rule 21 (instruction -> break_instr .)
    (               reduce using rule 21 (instruction -> break_instr .)
    INTEGER         reduce using rule 21 (instruction -> break_instr .)
    FLOAT           reduce using rule 21 (instruction -> break_instr .)
    STRING          reduce using rule 21 (instruction -> break_instr .)
    $end            reduce using rule 21 (instruction -> break_instr .)
    UNTIL           reduce using rule 21 (instruction -> break_instr .)
    }               reduce using rule 21 (instruction -> break_instr .)
    ELSE            reduce using rule 21 (instruction -> break_instr .)


state 27

    (6) anything -> instruction .

    }               reduce using rule 6 (anything -> instruction .)
    TYPE            reduce using rule 6 (anything -> instruction .)
    error           reduce using rule 6 (anything -> instruction .)
    PRINT           reduce using rule 6 (anything -> instruction .)
    ID              reduce using rule 6 (anything -> instruction .)
    IF              reduce using rule 6 (anything -> instruction .)
    WHILE           reduce using rule 6 (anything -> instruction .)
    REPEAT          reduce using rule 6 (anything -> instruction .)
    RETURN          reduce using rule 6 (anything -> instruction .)
    BREAK           reduce using rule 6 (anything -> instruction .)
    CONTINUE        reduce using rule 6 (anything -> instruction .)
    {               reduce using rule 6 (anything -> instruction .)
    (               reduce using rule 6 (anything -> instruction .)
    INTEGER         reduce using rule 6 (anything -> instruction .)
    FLOAT           reduce using rule 6 (anything -> instruction .)
    STRING          reduce using rule 6 (anything -> instruction .)
    UNTIL           reduce using rule 6 (anything -> instruction .)
    $end            reduce using rule 6 (anything -> instruction .)


state 28

    (5) anything -> fundef .

    }               reduce using rule 5 (anything -> fundef .)
    TYPE            reduce using rule 5 (anything -> fundef .)
    error           reduce using rule 5 (anything -> fundef .)
    PRINT           reduce using rule 5 (anything -> fundef .)
    ID              reduce using rule 5 (anything -> fundef .)
    IF              reduce using rule 5 (anything -> fundef .)
    WHILE           reduce using rule 5 (anything -> fundef .)
    REPEAT          reduce using rule 5 (anything -> fundef .)
    RETURN          reduce using rule 5 (anything -> fundef .)
    BREAK           reduce using rule 5 (anything -> fundef .)
    CONTINUE        reduce using rule 5 (anything -> fundef .)
    {               reduce using rule 5 (anything -> fundef .)
    (               reduce using rule 5 (anything -> fundef .)
    INTEGER         reduce using rule 5 (anything -> fundef .)
    FLOAT           reduce using rule 5 (anything -> fundef .)
    STRING          reduce using rule 5 (anything -> fundef .)
    UNTIL           reduce using rule 5 (anything -> fundef .)
    $end            reduce using rule 5 (anything -> fundef .)


state 29

    (14) instruction -> print_instr .

    TYPE            reduce using rule 14 (instruction -> print_instr .)
    error           reduce using rule 14 (instruction -> print_instr .)
    PRINT           reduce using rule 14 (instruction -> print_instr .)
    ID              reduce using rule 14 (instruction -> print_instr .)
    IF              reduce using rule 14 (instruction -> print_instr .)
    WHILE           reduce using rule 14 (instruction -> print_instr .)
    REPEAT          reduce using rule 14 (instruction -> print_instr .)
    RETURN          reduce using rule 14 (instruction -> print_instr .)
    BREAK           reduce using rule 14 (instruction -> print_instr .)
    CONTINUE        reduce using rule 14 (instruction -> print_instr .)
    {               reduce using rule 14 (instruction -> print_instr .)
    (               reduce using rule 14 (instruction -> print_instr .)
    INTEGER         reduce using rule 14 (instruction -> print_instr .)
    FLOAT           reduce using rule 14 (instruction -> print_instr .)
    STRING          reduce using rule 14 (instruction -> print_instr .)
    $end            reduce using rule 14 (instruction -> print_instr .)
    UNTIL           reduce using rule 14 (instruction -> print_instr .)
    }               reduce using rule 14 (instruction -> print_instr .)
    ELSE            reduce using rule 14 (instruction -> print_instr .)


state 30

    (37) continue_instr -> CONTINUE . ;

    ;               shift and go to state 51


state 31

    (10) declaration -> error . ;

    ;               shift and go to state 52


state 32

    (72) fundef -> TYPE . ID ( args_list_or_empty ) compound_instr
    (9) declaration -> TYPE . inits ;
    (11) inits -> . inits , init
    (12) inits -> . init
    (13) init -> . ID = expression

    ID              shift and go to state 55

    init                           shift and go to state 53
    inits                          shift and go to state 54

state 33

    (39) compound_instr -> { . anything_list }
    (2) anything_list -> . anything_list anything
    (3) anything_list -> .

    }               reduce using rule 3 (anything_list -> .)
    TYPE            reduce using rule 3 (anything_list -> .)
    error           reduce using rule 3 (anything_list -> .)
    PRINT           reduce using rule 3 (anything_list -> .)
    ID              reduce using rule 3 (anything_list -> .)
    IF              reduce using rule 3 (anything_list -> .)
    WHILE           reduce using rule 3 (anything_list -> .)
    REPEAT          reduce using rule 3 (anything_list -> .)
    RETURN          reduce using rule 3 (anything_list -> .)
    BREAK           reduce using rule 3 (anything_list -> .)
    CONTINUE        reduce using rule 3 (anything_list -> .)
    {               reduce using rule 3 (anything_list -> .)
    (               reduce using rule 3 (anything_list -> .)
    INTEGER         reduce using rule 3 (anything_list -> .)
    FLOAT           reduce using rule 3 (anything_list -> .)
    STRING          reduce using rule 3 (anything_list -> .)

    anything_list                  shift and go to state 56

state 34

    (24) instruction -> expression . ;
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               shift and go to state 72
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    |               shift and go to state 74
    &               shift and go to state 61
    ^               shift and go to state 75
    AND             shift and go to state 57
    OR              shift and go to state 68
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71


state 35

    (7) declarations -> declarations declaration .

    TYPE            reduce using rule 7 (declarations -> declarations declaration .)
    error           reduce using rule 7 (declarations -> declarations declaration .)
    PRINT           reduce using rule 7 (declarations -> declarations declaration .)
    ID              reduce using rule 7 (declarations -> declarations declaration .)
    IF              reduce using rule 7 (declarations -> declarations declaration .)
    WHILE           reduce using rule 7 (declarations -> declarations declaration .)
    REPEAT          reduce using rule 7 (declarations -> declarations declaration .)
    RETURN          reduce using rule 7 (declarations -> declarations declaration .)
    BREAK           reduce using rule 7 (declarations -> declarations declaration .)
    CONTINUE        reduce using rule 7 (declarations -> declarations declaration .)
    {               reduce using rule 7 (declarations -> declarations declaration .)
    (               reduce using rule 7 (declarations -> declarations declaration .)
    INTEGER         reduce using rule 7 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 7 (declarations -> declarations declaration .)
    STRING          reduce using rule 7 (declarations -> declarations declaration .)
    $end            reduce using rule 7 (declarations -> declarations declaration .)
    }               reduce using rule 7 (declarations -> declarations declaration .)
    UNTIL           reduce using rule 7 (declarations -> declarations declaration .)


state 36

    (9) declaration -> TYPE . inits ;
    (11) inits -> . inits , init
    (12) inits -> . init
    (13) init -> . ID = expression

    ID              shift and go to state 76

    init                           shift and go to state 53
    inits                          shift and go to state 54

state 37

    (44) expression -> ID .
    (66) expression -> ID . ( expr_list_or_empty )
    (67) expression -> ID . ( error )

    +               reduce using rule 44 (expression -> ID .)
    -               reduce using rule 44 (expression -> ID .)
    *               reduce using rule 44 (expression -> ID .)
    /               reduce using rule 44 (expression -> ID .)
    %               reduce using rule 44 (expression -> ID .)
    |               reduce using rule 44 (expression -> ID .)
    &               reduce using rule 44 (expression -> ID .)
    ^               reduce using rule 44 (expression -> ID .)
    AND             reduce using rule 44 (expression -> ID .)
    OR              reduce using rule 44 (expression -> ID .)
    SHL             reduce using rule 44 (expression -> ID .)
    SHR             reduce using rule 44 (expression -> ID .)
    EQ              reduce using rule 44 (expression -> ID .)
    NEQ             reduce using rule 44 (expression -> ID .)
    >               reduce using rule 44 (expression -> ID .)
    <               reduce using rule 44 (expression -> ID .)
    LE              reduce using rule 44 (expression -> ID .)
    GE              reduce using rule 44 (expression -> ID .)
    ;               reduce using rule 44 (expression -> ID .)
    ,               reduce using rule 44 (expression -> ID .)
    )               reduce using rule 44 (expression -> ID .)
    (               shift and go to state 47


state 38

    (36) return_instr -> RETURN expression . ;
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               shift and go to state 77
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    |               shift and go to state 74
    &               shift and go to state 61
    ^               shift and go to state 75
    AND             shift and go to state 57
    OR              shift and go to state 68
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71


state 39

    (25) print_instr -> PRINT expr_list . ;
    (70) expr_list -> expr_list . , expression

    ;               shift and go to state 78
    ,               shift and go to state 79


state 40

    (26) print_instr -> PRINT error . ;

    ;               shift and go to state 80


state 41

    (71) expr_list -> expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               reduce using rule 71 (expr_list -> expression .)
    ,               reduce using rule 71 (expr_list -> expression .)
    )               reduce using rule 71 (expr_list -> expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    |               shift and go to state 74
    &               shift and go to state 61
    ^               shift and go to state 75
    AND             shift and go to state 57
    OR              shift and go to state 68
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71


state 42

    (33) while_instr -> WHILE ( . condition ) instruction
    (34) while_instr -> WHILE ( . error ) instruction
    (40) condition -> . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    error           shift and go to state 82
    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 83
    condition                      shift and go to state 81

state 43

    (65) expression -> ( error . )

    )               shift and go to state 84


state 44

    (64) expression -> ( expression . )
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    )               shift and go to state 85
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    |               shift and go to state 74
    &               shift and go to state 61
    ^               shift and go to state 75
    AND             shift and go to state 57
    OR              shift and go to state 68
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71


state 45

    (38) break_instr -> BREAK ; .

    UNTIL           reduce using rule 38 (break_instr -> BREAK ; .)
    TYPE            reduce using rule 38 (break_instr -> BREAK ; .)
    error           reduce using rule 38 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 38 (break_instr -> BREAK ; .)
    ID              reduce using rule 38 (break_instr -> BREAK ; .)
    IF              reduce using rule 38 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 38 (break_instr -> BREAK ; .)
    REPEAT          reduce using rule 38 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 38 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 38 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 38 (break_instr -> BREAK ; .)
    {               reduce using rule 38 (break_instr -> BREAK ; .)
    (               reduce using rule 38 (break_instr -> BREAK ; .)
    INTEGER         reduce using rule 38 (break_instr -> BREAK ; .)
    FLOAT           reduce using rule 38 (break_instr -> BREAK ; .)
    STRING          reduce using rule 38 (break_instr -> BREAK ; .)
    $end            reduce using rule 38 (break_instr -> BREAK ; .)
    }               reduce using rule 38 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 38 (break_instr -> BREAK ; .)


state 46

    (35) repeat_instr -> REPEAT anything_list . UNTIL condition ;
    (2) anything_list -> anything_list . anything
    (4) anything -> . declarations
    (5) anything -> . fundef
    (6) anything -> . instruction
    (7) declarations -> . declarations declaration
    (8) declarations -> . declaration
    (72) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (9) declaration -> . TYPE inits ;
    (10) declaration -> . error ;
    (25) print_instr -> . PRINT expr_list ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { anything_list }
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    UNTIL           shift and go to state 86
    TYPE            shift and go to state 32
    error           shift and go to state 31
    PRINT           shift and go to state 6
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 7
    REPEAT          shift and go to state 16
    RETURN          shift and go to state 4
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 30
    {               shift and go to state 33
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    declarations                   shift and go to state 3
    choice_instr                   shift and go to state 5
    repeat_instr                   shift and go to state 8
    return_instr                   shift and go to state 9
    const                          shift and go to state 10
    continue_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    assignment                     shift and go to state 18
    labeled_instr                  shift and go to state 19
    compound_instr                 shift and go to state 20
    declaration                    shift and go to state 21
    anything                       shift and go to state 25
    break_instr                    shift and go to state 26
    instruction                    shift and go to state 27
    fundef                         shift and go to state 28
    print_instr                    shift and go to state 29
    expression                     shift and go to state 34

state 47

    (66) expression -> ID ( . expr_list_or_empty )
    (67) expression -> ID ( . error )
    (68) expr_list_or_empty -> . expr_list
    (69) expr_list_or_empty -> .
    (70) expr_list -> . expr_list , expression
    (71) expr_list -> . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    error           shift and go to state 89
    )               reduce using rule 69 (expr_list_or_empty -> .)
    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    expr_list                      shift and go to state 87
    expr_list_or_empty             shift and go to state 88
    expression                     shift and go to state 41
    const                          shift and go to state 10

state 48

    (27) labeled_instr -> ID : . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expr_list ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { anything_list }
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 7
    REPEAT          shift and go to state 16
    RETURN          shift and go to state 4
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 30
    {               shift and go to state 33
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    return_instr                   shift and go to state 9
    const                          shift and go to state 10
    assignment                     shift and go to state 18
    instruction                    shift and go to state 90
    compound_instr                 shift and go to state 20
    continue_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    print_instr                    shift and go to state 29
    choice_instr                   shift and go to state 5
    break_instr                    shift and go to state 26
    labeled_instr                  shift and go to state 19
    expression                     shift and go to state 34
    repeat_instr                   shift and go to state 8

state 49

    (28) assignment -> ID = . expression ;
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 91

state 50

    (29) choice_instr -> IF ( . condition ) instruction
    (30) choice_instr -> IF ( . condition ) instruction ELSE instruction
    (31) choice_instr -> IF ( . error ) instruction
    (32) choice_instr -> IF ( . error ) instruction ELSE instruction
    (40) condition -> . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    error           shift and go to state 93
    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 83
    condition                      shift and go to state 92

state 51

    (37) continue_instr -> CONTINUE ; .

    TYPE            reduce using rule 37 (continue_instr -> CONTINUE ; .)
    error           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 37 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 37 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    REPEAT          reduce using rule 37 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 37 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 37 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 37 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 37 (continue_instr -> CONTINUE ; .)
    INTEGER         reduce using rule 37 (continue_instr -> CONTINUE ; .)
    FLOAT           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 37 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 37 (continue_instr -> CONTINUE ; .)
    UNTIL           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 37 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 37 (continue_instr -> CONTINUE ; .)


state 52

    (10) declaration -> error ; .

    TYPE            reduce using rule 10 (declaration -> error ; .)
    error           reduce using rule 10 (declaration -> error ; .)
    PRINT           reduce using rule 10 (declaration -> error ; .)
    ID              reduce using rule 10 (declaration -> error ; .)
    IF              reduce using rule 10 (declaration -> error ; .)
    WHILE           reduce using rule 10 (declaration -> error ; .)
    REPEAT          reduce using rule 10 (declaration -> error ; .)
    RETURN          reduce using rule 10 (declaration -> error ; .)
    BREAK           reduce using rule 10 (declaration -> error ; .)
    CONTINUE        reduce using rule 10 (declaration -> error ; .)
    {               reduce using rule 10 (declaration -> error ; .)
    (               reduce using rule 10 (declaration -> error ; .)
    INTEGER         reduce using rule 10 (declaration -> error ; .)
    FLOAT           reduce using rule 10 (declaration -> error ; .)
    STRING          reduce using rule 10 (declaration -> error ; .)
    $end            reduce using rule 10 (declaration -> error ; .)
    UNTIL           reduce using rule 10 (declaration -> error ; .)
    }               reduce using rule 10 (declaration -> error ; .)


state 53

    (12) inits -> init .

    ;               reduce using rule 12 (inits -> init .)
    ,               reduce using rule 12 (inits -> init .)


state 54

    (9) declaration -> TYPE inits . ;
    (11) inits -> inits . , init

    ;               shift and go to state 94
    ,               shift and go to state 95


state 55

    (72) fundef -> TYPE ID . ( args_list_or_empty ) compound_instr
    (13) init -> ID . = expression

    (               shift and go to state 96
    =               shift and go to state 97


state 56

    (39) compound_instr -> { anything_list . }
    (2) anything_list -> anything_list . anything
    (4) anything -> . declarations
    (5) anything -> . fundef
    (6) anything -> . instruction
    (7) declarations -> . declarations declaration
    (8) declarations -> . declaration
    (72) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (9) declaration -> . TYPE inits ;
    (10) declaration -> . error ;
    (25) print_instr -> . PRINT expr_list ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { anything_list }
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    }               shift and go to state 98
    TYPE            shift and go to state 32
    error           shift and go to state 31
    PRINT           shift and go to state 6
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 7
    REPEAT          shift and go to state 16
    RETURN          shift and go to state 4
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 30
    {               shift and go to state 33
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    declarations                   shift and go to state 3
    choice_instr                   shift and go to state 5
    repeat_instr                   shift and go to state 8
    return_instr                   shift and go to state 9
    const                          shift and go to state 10
    continue_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    assignment                     shift and go to state 18
    labeled_instr                  shift and go to state 19
    compound_instr                 shift and go to state 20
    declaration                    shift and go to state 21
    anything                       shift and go to state 25
    break_instr                    shift and go to state 26
    instruction                    shift and go to state 27
    fundef                         shift and go to state 28
    print_instr                    shift and go to state 29
    expression                     shift and go to state 34

state 57

    (54) expression -> expression AND . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 99

state 58

    (57) expression -> expression SHR . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 100

state 59

    (62) expression -> expression LE . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 101

state 60

    (50) expression -> expression % . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 102

state 61

    (52) expression -> expression & . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 103

state 62

    (61) expression -> expression < . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 104

state 63

    (56) expression -> expression SHL . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 105

state 64

    (46) expression -> expression + . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 106

state 65

    (48) expression -> expression * . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 107

state 66

    (47) expression -> expression - . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 108

state 67

    (49) expression -> expression / . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 109

state 68

    (55) expression -> expression OR . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 110

state 69

    (58) expression -> expression EQ . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 111

state 70

    (60) expression -> expression > . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 112

state 71

    (63) expression -> expression GE . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 113

state 72

    (24) instruction -> expression ; .

    TYPE            reduce using rule 24 (instruction -> expression ; .)
    error           reduce using rule 24 (instruction -> expression ; .)
    PRINT           reduce using rule 24 (instruction -> expression ; .)
    ID              reduce using rule 24 (instruction -> expression ; .)
    IF              reduce using rule 24 (instruction -> expression ; .)
    WHILE           reduce using rule 24 (instruction -> expression ; .)
    REPEAT          reduce using rule 24 (instruction -> expression ; .)
    RETURN          reduce using rule 24 (instruction -> expression ; .)
    BREAK           reduce using rule 24 (instruction -> expression ; .)
    CONTINUE        reduce using rule 24 (instruction -> expression ; .)
    {               reduce using rule 24 (instruction -> expression ; .)
    (               reduce using rule 24 (instruction -> expression ; .)
    INTEGER         reduce using rule 24 (instruction -> expression ; .)
    FLOAT           reduce using rule 24 (instruction -> expression ; .)
    STRING          reduce using rule 24 (instruction -> expression ; .)
    $end            reduce using rule 24 (instruction -> expression ; .)
    UNTIL           reduce using rule 24 (instruction -> expression ; .)
    }               reduce using rule 24 (instruction -> expression ; .)
    ELSE            reduce using rule 24 (instruction -> expression ; .)


state 73

    (59) expression -> expression NEQ . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 114

state 74

    (51) expression -> expression | . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 115

state 75

    (53) expression -> expression ^ . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 116

state 76

    (13) init -> ID . = expression

    =               shift and go to state 97


state 77

    (36) return_instr -> RETURN expression ; .

    TYPE            reduce using rule 36 (return_instr -> RETURN expression ; .)
    error           reduce using rule 36 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 36 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 36 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 36 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 36 (return_instr -> RETURN expression ; .)
    REPEAT          reduce using rule 36 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 36 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 36 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 36 (return_instr -> RETURN expression ; .)
    {               reduce using rule 36 (return_instr -> RETURN expression ; .)
    (               reduce using rule 36 (return_instr -> RETURN expression ; .)
    INTEGER         reduce using rule 36 (return_instr -> RETURN expression ; .)
    FLOAT           reduce using rule 36 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 36 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 36 (return_instr -> RETURN expression ; .)
    UNTIL           reduce using rule 36 (return_instr -> RETURN expression ; .)
    }               reduce using rule 36 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 36 (return_instr -> RETURN expression ; .)


state 78

    (25) print_instr -> PRINT expr_list ; .

    }               reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    TYPE            reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    error           reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    PRINT           reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    ID              reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    IF              reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    WHILE           reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    REPEAT          reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    RETURN          reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    BREAK           reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    CONTINUE        reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    {               reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    (               reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    INTEGER         reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    FLOAT           reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    STRING          reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    $end            reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    UNTIL           reduce using rule 25 (print_instr -> PRINT expr_list ; .)
    ELSE            reduce using rule 25 (print_instr -> PRINT expr_list ; .)


state 79

    (70) expr_list -> expr_list , . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    expression                     shift and go to state 117
    const                          shift and go to state 10

state 80

    (26) print_instr -> PRINT error ; .

    }               reduce using rule 26 (print_instr -> PRINT error ; .)
    TYPE            reduce using rule 26 (print_instr -> PRINT error ; .)
    error           reduce using rule 26 (print_instr -> PRINT error ; .)
    PRINT           reduce using rule 26 (print_instr -> PRINT error ; .)
    ID              reduce using rule 26 (print_instr -> PRINT error ; .)
    IF              reduce using rule 26 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 26 (print_instr -> PRINT error ; .)
    REPEAT          reduce using rule 26 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 26 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 26 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 26 (print_instr -> PRINT error ; .)
    {               reduce using rule 26 (print_instr -> PRINT error ; .)
    (               reduce using rule 26 (print_instr -> PRINT error ; .)
    INTEGER         reduce using rule 26 (print_instr -> PRINT error ; .)
    FLOAT           reduce using rule 26 (print_instr -> PRINT error ; .)
    STRING          reduce using rule 26 (print_instr -> PRINT error ; .)
    $end            reduce using rule 26 (print_instr -> PRINT error ; .)
    UNTIL           reduce using rule 26 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 26 (print_instr -> PRINT error ; .)


state 81

    (33) while_instr -> WHILE ( condition . ) instruction

    )               shift and go to state 118


state 82

    (34) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 119


state 83

    (40) condition -> expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    )               reduce using rule 40 (condition -> expression .)
    ;               reduce using rule 40 (condition -> expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    |               shift and go to state 74
    &               shift and go to state 61
    ^               shift and go to state 75
    AND             shift and go to state 57
    OR              shift and go to state 68
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71


state 84

    (65) expression -> ( error ) .

    +               reduce using rule 65 (expression -> ( error ) .)
    -               reduce using rule 65 (expression -> ( error ) .)
    *               reduce using rule 65 (expression -> ( error ) .)
    /               reduce using rule 65 (expression -> ( error ) .)
    %               reduce using rule 65 (expression -> ( error ) .)
    |               reduce using rule 65 (expression -> ( error ) .)
    &               reduce using rule 65 (expression -> ( error ) .)
    ^               reduce using rule 65 (expression -> ( error ) .)
    AND             reduce using rule 65 (expression -> ( error ) .)
    OR              reduce using rule 65 (expression -> ( error ) .)
    SHL             reduce using rule 65 (expression -> ( error ) .)
    SHR             reduce using rule 65 (expression -> ( error ) .)
    EQ              reduce using rule 65 (expression -> ( error ) .)
    NEQ             reduce using rule 65 (expression -> ( error ) .)
    >               reduce using rule 65 (expression -> ( error ) .)
    <               reduce using rule 65 (expression -> ( error ) .)
    LE              reduce using rule 65 (expression -> ( error ) .)
    GE              reduce using rule 65 (expression -> ( error ) .)
    ;               reduce using rule 65 (expression -> ( error ) .)
    ,               reduce using rule 65 (expression -> ( error ) .)
    )               reduce using rule 65 (expression -> ( error ) .)


state 85

    (64) expression -> ( expression ) .

    +               reduce using rule 64 (expression -> ( expression ) .)
    -               reduce using rule 64 (expression -> ( expression ) .)
    *               reduce using rule 64 (expression -> ( expression ) .)
    /               reduce using rule 64 (expression -> ( expression ) .)
    %               reduce using rule 64 (expression -> ( expression ) .)
    |               reduce using rule 64 (expression -> ( expression ) .)
    &               reduce using rule 64 (expression -> ( expression ) .)
    ^               reduce using rule 64 (expression -> ( expression ) .)
    AND             reduce using rule 64 (expression -> ( expression ) .)
    OR              reduce using rule 64 (expression -> ( expression ) .)
    SHL             reduce using rule 64 (expression -> ( expression ) .)
    SHR             reduce using rule 64 (expression -> ( expression ) .)
    EQ              reduce using rule 64 (expression -> ( expression ) .)
    NEQ             reduce using rule 64 (expression -> ( expression ) .)
    >               reduce using rule 64 (expression -> ( expression ) .)
    <               reduce using rule 64 (expression -> ( expression ) .)
    LE              reduce using rule 64 (expression -> ( expression ) .)
    GE              reduce using rule 64 (expression -> ( expression ) .)
    ;               reduce using rule 64 (expression -> ( expression ) .)
    ,               reduce using rule 64 (expression -> ( expression ) .)
    )               reduce using rule 64 (expression -> ( expression ) .)


state 86

    (35) repeat_instr -> REPEAT anything_list UNTIL . condition ;
    (40) condition -> . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 83
    condition                      shift and go to state 120

state 87

    (68) expr_list_or_empty -> expr_list .
    (70) expr_list -> expr_list . , expression

    )               reduce using rule 68 (expr_list_or_empty -> expr_list .)
    ,               shift and go to state 79


state 88

    (66) expression -> ID ( expr_list_or_empty . )

    )               shift and go to state 121


state 89

    (67) expression -> ID ( error . )

    )               shift and go to state 122


state 90

    (27) labeled_instr -> ID : instruction .

    }               reduce using rule 27 (labeled_instr -> ID : instruction .)
    TYPE            reduce using rule 27 (labeled_instr -> ID : instruction .)
    error           reduce using rule 27 (labeled_instr -> ID : instruction .)
    PRINT           reduce using rule 27 (labeled_instr -> ID : instruction .)
    ID              reduce using rule 27 (labeled_instr -> ID : instruction .)
    IF              reduce using rule 27 (labeled_instr -> ID : instruction .)
    WHILE           reduce using rule 27 (labeled_instr -> ID : instruction .)
    REPEAT          reduce using rule 27 (labeled_instr -> ID : instruction .)
    RETURN          reduce using rule 27 (labeled_instr -> ID : instruction .)
    BREAK           reduce using rule 27 (labeled_instr -> ID : instruction .)
    CONTINUE        reduce using rule 27 (labeled_instr -> ID : instruction .)
    {               reduce using rule 27 (labeled_instr -> ID : instruction .)
    (               reduce using rule 27 (labeled_instr -> ID : instruction .)
    INTEGER         reduce using rule 27 (labeled_instr -> ID : instruction .)
    FLOAT           reduce using rule 27 (labeled_instr -> ID : instruction .)
    STRING          reduce using rule 27 (labeled_instr -> ID : instruction .)
    $end            reduce using rule 27 (labeled_instr -> ID : instruction .)
    UNTIL           reduce using rule 27 (labeled_instr -> ID : instruction .)
    ELSE            reduce using rule 27 (labeled_instr -> ID : instruction .)


state 91

    (28) assignment -> ID = expression . ;
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               shift and go to state 123
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    |               shift and go to state 74
    &               shift and go to state 61
    ^               shift and go to state 75
    AND             shift and go to state 57
    OR              shift and go to state 68
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71


state 92

    (29) choice_instr -> IF ( condition . ) instruction
    (30) choice_instr -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 124


state 93

    (31) choice_instr -> IF ( error . ) instruction
    (32) choice_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 125


state 94

    (9) declaration -> TYPE inits ; .

    TYPE            reduce using rule 9 (declaration -> TYPE inits ; .)
    error           reduce using rule 9 (declaration -> TYPE inits ; .)
    PRINT           reduce using rule 9 (declaration -> TYPE inits ; .)
    ID              reduce using rule 9 (declaration -> TYPE inits ; .)
    IF              reduce using rule 9 (declaration -> TYPE inits ; .)
    WHILE           reduce using rule 9 (declaration -> TYPE inits ; .)
    REPEAT          reduce using rule 9 (declaration -> TYPE inits ; .)
    RETURN          reduce using rule 9 (declaration -> TYPE inits ; .)
    BREAK           reduce using rule 9 (declaration -> TYPE inits ; .)
    CONTINUE        reduce using rule 9 (declaration -> TYPE inits ; .)
    {               reduce using rule 9 (declaration -> TYPE inits ; .)
    (               reduce using rule 9 (declaration -> TYPE inits ; .)
    INTEGER         reduce using rule 9 (declaration -> TYPE inits ; .)
    FLOAT           reduce using rule 9 (declaration -> TYPE inits ; .)
    STRING          reduce using rule 9 (declaration -> TYPE inits ; .)
    $end            reduce using rule 9 (declaration -> TYPE inits ; .)
    UNTIL           reduce using rule 9 (declaration -> TYPE inits ; .)
    }               reduce using rule 9 (declaration -> TYPE inits ; .)


state 95

    (11) inits -> inits , . init
    (13) init -> . ID = expression

    ID              shift and go to state 76

    init                           shift and go to state 126

state 96

    (72) fundef -> TYPE ID ( . args_list_or_empty ) compound_instr
    (73) args_list_or_empty -> . args_list
    (74) args_list_or_empty -> .
    (75) args_list -> . args_list , arg
    (76) args_list -> . arg
    (77) arg -> . TYPE ID

    )               reduce using rule 74 (args_list_or_empty -> .)
    TYPE            shift and go to state 130

    args_list_or_empty             shift and go to state 128
    arg                            shift and go to state 129
    args_list                      shift and go to state 127

state 97

    (13) init -> ID = . expression
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 37
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    const                          shift and go to state 10
    expression                     shift and go to state 131

state 98

    (39) compound_instr -> { anything_list } .

    TYPE            reduce using rule 39 (compound_instr -> { anything_list } .)
    error           reduce using rule 39 (compound_instr -> { anything_list } .)
    PRINT           reduce using rule 39 (compound_instr -> { anything_list } .)
    ID              reduce using rule 39 (compound_instr -> { anything_list } .)
    IF              reduce using rule 39 (compound_instr -> { anything_list } .)
    WHILE           reduce using rule 39 (compound_instr -> { anything_list } .)
    REPEAT          reduce using rule 39 (compound_instr -> { anything_list } .)
    RETURN          reduce using rule 39 (compound_instr -> { anything_list } .)
    BREAK           reduce using rule 39 (compound_instr -> { anything_list } .)
    CONTINUE        reduce using rule 39 (compound_instr -> { anything_list } .)
    {               reduce using rule 39 (compound_instr -> { anything_list } .)
    (               reduce using rule 39 (compound_instr -> { anything_list } .)
    INTEGER         reduce using rule 39 (compound_instr -> { anything_list } .)
    FLOAT           reduce using rule 39 (compound_instr -> { anything_list } .)
    STRING          reduce using rule 39 (compound_instr -> { anything_list } .)
    $end            reduce using rule 39 (compound_instr -> { anything_list } .)
    UNTIL           reduce using rule 39 (compound_instr -> { anything_list } .)
    }               reduce using rule 39 (compound_instr -> { anything_list } .)
    ELSE            reduce using rule 39 (compound_instr -> { anything_list } .)


state 99

    (54) expression -> expression AND expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    AND             reduce using rule 54 (expression -> expression AND expression .)
    OR              reduce using rule 54 (expression -> expression AND expression .)
    ;               reduce using rule 54 (expression -> expression AND expression .)
    ,               reduce using rule 54 (expression -> expression AND expression .)
    )               reduce using rule 54 (expression -> expression AND expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    |               shift and go to state 74
    &               shift and go to state 61
    ^               shift and go to state 75
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71

  ! +               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! |               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! &               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! SHL             [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! SHR             [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]


state 100

    (57) expression -> expression SHR expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 57 (expression -> expression SHR expression .)
    &               reduce using rule 57 (expression -> expression SHR expression .)
    ^               reduce using rule 57 (expression -> expression SHR expression .)
    AND             reduce using rule 57 (expression -> expression SHR expression .)
    OR              reduce using rule 57 (expression -> expression SHR expression .)
    SHL             reduce using rule 57 (expression -> expression SHR expression .)
    SHR             reduce using rule 57 (expression -> expression SHR expression .)
    EQ              reduce using rule 57 (expression -> expression SHR expression .)
    NEQ             reduce using rule 57 (expression -> expression SHR expression .)
    >               reduce using rule 57 (expression -> expression SHR expression .)
    <               reduce using rule 57 (expression -> expression SHR expression .)
    LE              reduce using rule 57 (expression -> expression SHR expression .)
    GE              reduce using rule 57 (expression -> expression SHR expression .)
    ;               reduce using rule 57 (expression -> expression SHR expression .)
    ,               reduce using rule 57 (expression -> expression SHR expression .)
    )               reduce using rule 57 (expression -> expression SHR expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60

  ! +               [ reduce using rule 57 (expression -> expression SHR expression .) ]
  ! -               [ reduce using rule 57 (expression -> expression SHR expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression SHR expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression SHR expression .) ]
  ! %               [ reduce using rule 57 (expression -> expression SHR expression .) ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! SHL             [ shift and go to state 63 ]
  ! SHR             [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 101

    (62) expression -> expression LE expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 62 (expression -> expression LE expression .)
    &               reduce using rule 62 (expression -> expression LE expression .)
    ^               reduce using rule 62 (expression -> expression LE expression .)
    AND             reduce using rule 62 (expression -> expression LE expression .)
    OR              reduce using rule 62 (expression -> expression LE expression .)
    EQ              reduce using rule 62 (expression -> expression LE expression .)
    NEQ             reduce using rule 62 (expression -> expression LE expression .)
    >               reduce using rule 62 (expression -> expression LE expression .)
    <               reduce using rule 62 (expression -> expression LE expression .)
    LE              reduce using rule 62 (expression -> expression LE expression .)
    GE              reduce using rule 62 (expression -> expression LE expression .)
    ;               reduce using rule 62 (expression -> expression LE expression .)
    ,               reduce using rule 62 (expression -> expression LE expression .)
    )               reduce using rule 62 (expression -> expression LE expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    SHL             shift and go to state 63
    SHR             shift and go to state 58

  ! +               [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! %               [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! SHL             [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! SHR             [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 102

    (50) expression -> expression % expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    +               reduce using rule 50 (expression -> expression % expression .)
    -               reduce using rule 50 (expression -> expression % expression .)
    *               reduce using rule 50 (expression -> expression % expression .)
    /               reduce using rule 50 (expression -> expression % expression .)
    %               reduce using rule 50 (expression -> expression % expression .)
    |               reduce using rule 50 (expression -> expression % expression .)
    &               reduce using rule 50 (expression -> expression % expression .)
    ^               reduce using rule 50 (expression -> expression % expression .)
    AND             reduce using rule 50 (expression -> expression % expression .)
    OR              reduce using rule 50 (expression -> expression % expression .)
    SHL             reduce using rule 50 (expression -> expression % expression .)
    SHR             reduce using rule 50 (expression -> expression % expression .)
    EQ              reduce using rule 50 (expression -> expression % expression .)
    NEQ             reduce using rule 50 (expression -> expression % expression .)
    >               reduce using rule 50 (expression -> expression % expression .)
    <               reduce using rule 50 (expression -> expression % expression .)
    LE              reduce using rule 50 (expression -> expression % expression .)
    GE              reduce using rule 50 (expression -> expression % expression .)
    ;               reduce using rule 50 (expression -> expression % expression .)
    ,               reduce using rule 50 (expression -> expression % expression .)
    )               reduce using rule 50 (expression -> expression % expression .)

  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 66 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 67 ]
  ! %               [ shift and go to state 60 ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! SHL             [ shift and go to state 63 ]
  ! SHR             [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 103

    (52) expression -> expression & expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 52 (expression -> expression & expression .)
    &               reduce using rule 52 (expression -> expression & expression .)
    ^               reduce using rule 52 (expression -> expression & expression .)
    AND             reduce using rule 52 (expression -> expression & expression .)
    OR              reduce using rule 52 (expression -> expression & expression .)
    ;               reduce using rule 52 (expression -> expression & expression .)
    ,               reduce using rule 52 (expression -> expression & expression .)
    )               reduce using rule 52 (expression -> expression & expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71

  ! +               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! %               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! SHL             [ reduce using rule 52 (expression -> expression & expression .) ]
  ! SHR             [ reduce using rule 52 (expression -> expression & expression .) ]
  ! EQ              [ reduce using rule 52 (expression -> expression & expression .) ]
  ! NEQ             [ reduce using rule 52 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! LE              [ reduce using rule 52 (expression -> expression & expression .) ]
  ! GE              [ reduce using rule 52 (expression -> expression & expression .) ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]


state 104

    (61) expression -> expression < expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 61 (expression -> expression < expression .)
    &               reduce using rule 61 (expression -> expression < expression .)
    ^               reduce using rule 61 (expression -> expression < expression .)
    AND             reduce using rule 61 (expression -> expression < expression .)
    OR              reduce using rule 61 (expression -> expression < expression .)
    EQ              reduce using rule 61 (expression -> expression < expression .)
    NEQ             reduce using rule 61 (expression -> expression < expression .)
    >               reduce using rule 61 (expression -> expression < expression .)
    <               reduce using rule 61 (expression -> expression < expression .)
    LE              reduce using rule 61 (expression -> expression < expression .)
    GE              reduce using rule 61 (expression -> expression < expression .)
    ;               reduce using rule 61 (expression -> expression < expression .)
    ,               reduce using rule 61 (expression -> expression < expression .)
    )               reduce using rule 61 (expression -> expression < expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    SHL             shift and go to state 63
    SHR             shift and go to state 58

  ! +               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! SHL             [ reduce using rule 61 (expression -> expression < expression .) ]
  ! SHR             [ reduce using rule 61 (expression -> expression < expression .) ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 105

    (56) expression -> expression SHL expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 56 (expression -> expression SHL expression .)
    &               reduce using rule 56 (expression -> expression SHL expression .)
    ^               reduce using rule 56 (expression -> expression SHL expression .)
    AND             reduce using rule 56 (expression -> expression SHL expression .)
    OR              reduce using rule 56 (expression -> expression SHL expression .)
    SHL             reduce using rule 56 (expression -> expression SHL expression .)
    SHR             reduce using rule 56 (expression -> expression SHL expression .)
    EQ              reduce using rule 56 (expression -> expression SHL expression .)
    NEQ             reduce using rule 56 (expression -> expression SHL expression .)
    >               reduce using rule 56 (expression -> expression SHL expression .)
    <               reduce using rule 56 (expression -> expression SHL expression .)
    LE              reduce using rule 56 (expression -> expression SHL expression .)
    GE              reduce using rule 56 (expression -> expression SHL expression .)
    ;               reduce using rule 56 (expression -> expression SHL expression .)
    ,               reduce using rule 56 (expression -> expression SHL expression .)
    )               reduce using rule 56 (expression -> expression SHL expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60

  ! +               [ reduce using rule 56 (expression -> expression SHL expression .) ]
  ! -               [ reduce using rule 56 (expression -> expression SHL expression .) ]
  ! *               [ reduce using rule 56 (expression -> expression SHL expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression SHL expression .) ]
  ! %               [ reduce using rule 56 (expression -> expression SHL expression .) ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! SHL             [ shift and go to state 63 ]
  ! SHR             [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 106

    (46) expression -> expression + expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    +               reduce using rule 46 (expression -> expression + expression .)
    -               reduce using rule 46 (expression -> expression + expression .)
    |               reduce using rule 46 (expression -> expression + expression .)
    &               reduce using rule 46 (expression -> expression + expression .)
    ^               reduce using rule 46 (expression -> expression + expression .)
    AND             reduce using rule 46 (expression -> expression + expression .)
    OR              reduce using rule 46 (expression -> expression + expression .)
    SHL             reduce using rule 46 (expression -> expression + expression .)
    SHR             reduce using rule 46 (expression -> expression + expression .)
    EQ              reduce using rule 46 (expression -> expression + expression .)
    NEQ             reduce using rule 46 (expression -> expression + expression .)
    >               reduce using rule 46 (expression -> expression + expression .)
    <               reduce using rule 46 (expression -> expression + expression .)
    LE              reduce using rule 46 (expression -> expression + expression .)
    GE              reduce using rule 46 (expression -> expression + expression .)
    ;               reduce using rule 46 (expression -> expression + expression .)
    ,               reduce using rule 46 (expression -> expression + expression .)
    )               reduce using rule 46 (expression -> expression + expression .)
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60

  ! *               [ reduce using rule 46 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 46 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 46 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 66 ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! SHL             [ shift and go to state 63 ]
  ! SHR             [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 107

    (48) expression -> expression * expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    +               reduce using rule 48 (expression -> expression * expression .)
    -               reduce using rule 48 (expression -> expression * expression .)
    *               reduce using rule 48 (expression -> expression * expression .)
    /               reduce using rule 48 (expression -> expression * expression .)
    %               reduce using rule 48 (expression -> expression * expression .)
    |               reduce using rule 48 (expression -> expression * expression .)
    &               reduce using rule 48 (expression -> expression * expression .)
    ^               reduce using rule 48 (expression -> expression * expression .)
    AND             reduce using rule 48 (expression -> expression * expression .)
    OR              reduce using rule 48 (expression -> expression * expression .)
    SHL             reduce using rule 48 (expression -> expression * expression .)
    SHR             reduce using rule 48 (expression -> expression * expression .)
    EQ              reduce using rule 48 (expression -> expression * expression .)
    NEQ             reduce using rule 48 (expression -> expression * expression .)
    >               reduce using rule 48 (expression -> expression * expression .)
    <               reduce using rule 48 (expression -> expression * expression .)
    LE              reduce using rule 48 (expression -> expression * expression .)
    GE              reduce using rule 48 (expression -> expression * expression .)
    ;               reduce using rule 48 (expression -> expression * expression .)
    ,               reduce using rule 48 (expression -> expression * expression .)
    )               reduce using rule 48 (expression -> expression * expression .)

  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 66 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 67 ]
  ! %               [ shift and go to state 60 ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! SHL             [ shift and go to state 63 ]
  ! SHR             [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 108

    (47) expression -> expression - expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    +               reduce using rule 47 (expression -> expression - expression .)
    -               reduce using rule 47 (expression -> expression - expression .)
    |               reduce using rule 47 (expression -> expression - expression .)
    &               reduce using rule 47 (expression -> expression - expression .)
    ^               reduce using rule 47 (expression -> expression - expression .)
    AND             reduce using rule 47 (expression -> expression - expression .)
    OR              reduce using rule 47 (expression -> expression - expression .)
    SHL             reduce using rule 47 (expression -> expression - expression .)
    SHR             reduce using rule 47 (expression -> expression - expression .)
    EQ              reduce using rule 47 (expression -> expression - expression .)
    NEQ             reduce using rule 47 (expression -> expression - expression .)
    >               reduce using rule 47 (expression -> expression - expression .)
    <               reduce using rule 47 (expression -> expression - expression .)
    LE              reduce using rule 47 (expression -> expression - expression .)
    GE              reduce using rule 47 (expression -> expression - expression .)
    ;               reduce using rule 47 (expression -> expression - expression .)
    ,               reduce using rule 47 (expression -> expression - expression .)
    )               reduce using rule 47 (expression -> expression - expression .)
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60

  ! *               [ reduce using rule 47 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 47 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 47 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 66 ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! SHL             [ shift and go to state 63 ]
  ! SHR             [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 109

    (49) expression -> expression / expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    +               reduce using rule 49 (expression -> expression / expression .)
    -               reduce using rule 49 (expression -> expression / expression .)
    *               reduce using rule 49 (expression -> expression / expression .)
    /               reduce using rule 49 (expression -> expression / expression .)
    %               reduce using rule 49 (expression -> expression / expression .)
    |               reduce using rule 49 (expression -> expression / expression .)
    &               reduce using rule 49 (expression -> expression / expression .)
    ^               reduce using rule 49 (expression -> expression / expression .)
    AND             reduce using rule 49 (expression -> expression / expression .)
    OR              reduce using rule 49 (expression -> expression / expression .)
    SHL             reduce using rule 49 (expression -> expression / expression .)
    SHR             reduce using rule 49 (expression -> expression / expression .)
    EQ              reduce using rule 49 (expression -> expression / expression .)
    NEQ             reduce using rule 49 (expression -> expression / expression .)
    >               reduce using rule 49 (expression -> expression / expression .)
    <               reduce using rule 49 (expression -> expression / expression .)
    LE              reduce using rule 49 (expression -> expression / expression .)
    GE              reduce using rule 49 (expression -> expression / expression .)
    ;               reduce using rule 49 (expression -> expression / expression .)
    ,               reduce using rule 49 (expression -> expression / expression .)
    )               reduce using rule 49 (expression -> expression / expression .)

  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 66 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 67 ]
  ! %               [ shift and go to state 60 ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! SHL             [ shift and go to state 63 ]
  ! SHR             [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 110

    (55) expression -> expression OR expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    OR              reduce using rule 55 (expression -> expression OR expression .)
    ;               reduce using rule 55 (expression -> expression OR expression .)
    ,               reduce using rule 55 (expression -> expression OR expression .)
    )               reduce using rule 55 (expression -> expression OR expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    |               shift and go to state 74
    &               shift and go to state 61
    ^               shift and go to state 75
    AND             shift and go to state 57
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71

  ! +               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! |               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! &               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! SHL             [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! SHR             [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 68 ]


state 111

    (58) expression -> expression EQ expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 58 (expression -> expression EQ expression .)
    &               reduce using rule 58 (expression -> expression EQ expression .)
    ^               reduce using rule 58 (expression -> expression EQ expression .)
    AND             reduce using rule 58 (expression -> expression EQ expression .)
    OR              reduce using rule 58 (expression -> expression EQ expression .)
    EQ              reduce using rule 58 (expression -> expression EQ expression .)
    NEQ             reduce using rule 58 (expression -> expression EQ expression .)
    >               reduce using rule 58 (expression -> expression EQ expression .)
    <               reduce using rule 58 (expression -> expression EQ expression .)
    LE              reduce using rule 58 (expression -> expression EQ expression .)
    GE              reduce using rule 58 (expression -> expression EQ expression .)
    ;               reduce using rule 58 (expression -> expression EQ expression .)
    ,               reduce using rule 58 (expression -> expression EQ expression .)
    )               reduce using rule 58 (expression -> expression EQ expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    SHL             shift and go to state 63
    SHR             shift and go to state 58

  ! +               [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! SHL             [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! SHR             [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 112

    (60) expression -> expression > expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 60 (expression -> expression > expression .)
    &               reduce using rule 60 (expression -> expression > expression .)
    ^               reduce using rule 60 (expression -> expression > expression .)
    AND             reduce using rule 60 (expression -> expression > expression .)
    OR              reduce using rule 60 (expression -> expression > expression .)
    EQ              reduce using rule 60 (expression -> expression > expression .)
    NEQ             reduce using rule 60 (expression -> expression > expression .)
    >               reduce using rule 60 (expression -> expression > expression .)
    <               reduce using rule 60 (expression -> expression > expression .)
    LE              reduce using rule 60 (expression -> expression > expression .)
    GE              reduce using rule 60 (expression -> expression > expression .)
    ;               reduce using rule 60 (expression -> expression > expression .)
    ,               reduce using rule 60 (expression -> expression > expression .)
    )               reduce using rule 60 (expression -> expression > expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    SHL             shift and go to state 63
    SHR             shift and go to state 58

  ! +               [ reduce using rule 60 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 60 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 60 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 60 (expression -> expression > expression .) ]
  ! SHL             [ reduce using rule 60 (expression -> expression > expression .) ]
  ! SHR             [ reduce using rule 60 (expression -> expression > expression .) ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 113

    (63) expression -> expression GE expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 63 (expression -> expression GE expression .)
    &               reduce using rule 63 (expression -> expression GE expression .)
    ^               reduce using rule 63 (expression -> expression GE expression .)
    AND             reduce using rule 63 (expression -> expression GE expression .)
    OR              reduce using rule 63 (expression -> expression GE expression .)
    EQ              reduce using rule 63 (expression -> expression GE expression .)
    NEQ             reduce using rule 63 (expression -> expression GE expression .)
    >               reduce using rule 63 (expression -> expression GE expression .)
    <               reduce using rule 63 (expression -> expression GE expression .)
    LE              reduce using rule 63 (expression -> expression GE expression .)
    GE              reduce using rule 63 (expression -> expression GE expression .)
    ;               reduce using rule 63 (expression -> expression GE expression .)
    ,               reduce using rule 63 (expression -> expression GE expression .)
    )               reduce using rule 63 (expression -> expression GE expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    SHL             shift and go to state 63
    SHR             shift and go to state 58

  ! +               [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! %               [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! SHL             [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! SHR             [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 114

    (59) expression -> expression NEQ expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 59 (expression -> expression NEQ expression .)
    &               reduce using rule 59 (expression -> expression NEQ expression .)
    ^               reduce using rule 59 (expression -> expression NEQ expression .)
    AND             reduce using rule 59 (expression -> expression NEQ expression .)
    OR              reduce using rule 59 (expression -> expression NEQ expression .)
    EQ              reduce using rule 59 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 59 (expression -> expression NEQ expression .)
    >               reduce using rule 59 (expression -> expression NEQ expression .)
    <               reduce using rule 59 (expression -> expression NEQ expression .)
    LE              reduce using rule 59 (expression -> expression NEQ expression .)
    GE              reduce using rule 59 (expression -> expression NEQ expression .)
    ;               reduce using rule 59 (expression -> expression NEQ expression .)
    ,               reduce using rule 59 (expression -> expression NEQ expression .)
    )               reduce using rule 59 (expression -> expression NEQ expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    SHL             shift and go to state 63
    SHR             shift and go to state 58

  ! +               [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! %               [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! SHL             [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! SHR             [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! |               [ shift and go to state 74 ]
  ! &               [ shift and go to state 61 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]
  ! EQ              [ shift and go to state 69 ]
  ! NEQ             [ shift and go to state 73 ]
  ! >               [ shift and go to state 70 ]
  ! <               [ shift and go to state 62 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 71 ]


state 115

    (51) expression -> expression | expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 51 (expression -> expression | expression .)
    AND             reduce using rule 51 (expression -> expression | expression .)
    OR              reduce using rule 51 (expression -> expression | expression .)
    ;               reduce using rule 51 (expression -> expression | expression .)
    ,               reduce using rule 51 (expression -> expression | expression .)
    )               reduce using rule 51 (expression -> expression | expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    &               shift and go to state 61
    ^               shift and go to state 75
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71

  ! +               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! %               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! ^               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! SHL             [ reduce using rule 51 (expression -> expression | expression .) ]
  ! SHR             [ reduce using rule 51 (expression -> expression | expression .) ]
  ! EQ              [ reduce using rule 51 (expression -> expression | expression .) ]
  ! NEQ             [ reduce using rule 51 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! LE              [ reduce using rule 51 (expression -> expression | expression .) ]
  ! GE              [ reduce using rule 51 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 74 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]


state 116

    (53) expression -> expression ^ expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 53 (expression -> expression ^ expression .)
    ^               reduce using rule 53 (expression -> expression ^ expression .)
    AND             reduce using rule 53 (expression -> expression ^ expression .)
    OR              reduce using rule 53 (expression -> expression ^ expression .)
    ;               reduce using rule 53 (expression -> expression ^ expression .)
    ,               reduce using rule 53 (expression -> expression ^ expression .)
    )               reduce using rule 53 (expression -> expression ^ expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    &               shift and go to state 61
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71

  ! +               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! %               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! &               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! SHL             [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! SHR             [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! EQ              [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! NEQ             [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! <               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! LE              [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! GE              [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! |               [ shift and go to state 74 ]
  ! ^               [ shift and go to state 75 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 68 ]


state 117

    (70) expr_list -> expr_list , expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               reduce using rule 70 (expr_list -> expr_list , expression .)
    ,               reduce using rule 70 (expr_list -> expr_list , expression .)
    )               reduce using rule 70 (expr_list -> expr_list , expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    |               shift and go to state 74
    &               shift and go to state 61
    ^               shift and go to state 75
    AND             shift and go to state 57
    OR              shift and go to state 68
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71


state 118

    (33) while_instr -> WHILE ( condition ) . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expr_list ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { anything_list }
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 7
    REPEAT          shift and go to state 16
    RETURN          shift and go to state 4
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 30
    {               shift and go to state 33
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    return_instr                   shift and go to state 9
    const                          shift and go to state 10
    assignment                     shift and go to state 18
    instruction                    shift and go to state 132
    compound_instr                 shift and go to state 20
    continue_instr                 shift and go to state 12
    labeled_instr                  shift and go to state 19
    print_instr                    shift and go to state 29
    choice_instr                   shift and go to state 5
    repeat_instr                   shift and go to state 8
    break_instr                    shift and go to state 26
    while_instr                    shift and go to state 13
    expression                     shift and go to state 34

state 119

    (34) while_instr -> WHILE ( error ) . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expr_list ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { anything_list }
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 7
    REPEAT          shift and go to state 16
    RETURN          shift and go to state 4
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 30
    {               shift and go to state 33
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    return_instr                   shift and go to state 9
    const                          shift and go to state 10
    assignment                     shift and go to state 18
    instruction                    shift and go to state 133
    compound_instr                 shift and go to state 20
    continue_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    print_instr                    shift and go to state 29
    choice_instr                   shift and go to state 5
    break_instr                    shift and go to state 26
    labeled_instr                  shift and go to state 19
    expression                     shift and go to state 34
    repeat_instr                   shift and go to state 8

state 120

    (35) repeat_instr -> REPEAT anything_list UNTIL condition . ;

    ;               shift and go to state 134


state 121

    (66) expression -> ID ( expr_list_or_empty ) .

    +               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    -               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    *               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    /               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    %               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    |               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    &               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    ^               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    AND             reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    OR              reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    SHL             reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    SHR             reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    EQ              reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    NEQ             reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    >               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    <               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    LE              reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    GE              reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    ;               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    ,               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    )               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)


state 122

    (67) expression -> ID ( error ) .

    +               reduce using rule 67 (expression -> ID ( error ) .)
    -               reduce using rule 67 (expression -> ID ( error ) .)
    *               reduce using rule 67 (expression -> ID ( error ) .)
    /               reduce using rule 67 (expression -> ID ( error ) .)
    %               reduce using rule 67 (expression -> ID ( error ) .)
    |               reduce using rule 67 (expression -> ID ( error ) .)
    &               reduce using rule 67 (expression -> ID ( error ) .)
    ^               reduce using rule 67 (expression -> ID ( error ) .)
    AND             reduce using rule 67 (expression -> ID ( error ) .)
    OR              reduce using rule 67 (expression -> ID ( error ) .)
    SHL             reduce using rule 67 (expression -> ID ( error ) .)
    SHR             reduce using rule 67 (expression -> ID ( error ) .)
    EQ              reduce using rule 67 (expression -> ID ( error ) .)
    NEQ             reduce using rule 67 (expression -> ID ( error ) .)
    >               reduce using rule 67 (expression -> ID ( error ) .)
    <               reduce using rule 67 (expression -> ID ( error ) .)
    LE              reduce using rule 67 (expression -> ID ( error ) .)
    GE              reduce using rule 67 (expression -> ID ( error ) .)
    ;               reduce using rule 67 (expression -> ID ( error ) .)
    ,               reduce using rule 67 (expression -> ID ( error ) .)
    )               reduce using rule 67 (expression -> ID ( error ) .)


state 123

    (28) assignment -> ID = expression ; .

    TYPE            reduce using rule 28 (assignment -> ID = expression ; .)
    error           reduce using rule 28 (assignment -> ID = expression ; .)
    PRINT           reduce using rule 28 (assignment -> ID = expression ; .)
    ID              reduce using rule 28 (assignment -> ID = expression ; .)
    IF              reduce using rule 28 (assignment -> ID = expression ; .)
    WHILE           reduce using rule 28 (assignment -> ID = expression ; .)
    REPEAT          reduce using rule 28 (assignment -> ID = expression ; .)
    RETURN          reduce using rule 28 (assignment -> ID = expression ; .)
    BREAK           reduce using rule 28 (assignment -> ID = expression ; .)
    CONTINUE        reduce using rule 28 (assignment -> ID = expression ; .)
    {               reduce using rule 28 (assignment -> ID = expression ; .)
    (               reduce using rule 28 (assignment -> ID = expression ; .)
    INTEGER         reduce using rule 28 (assignment -> ID = expression ; .)
    FLOAT           reduce using rule 28 (assignment -> ID = expression ; .)
    STRING          reduce using rule 28 (assignment -> ID = expression ; .)
    $end            reduce using rule 28 (assignment -> ID = expression ; .)
    UNTIL           reduce using rule 28 (assignment -> ID = expression ; .)
    }               reduce using rule 28 (assignment -> ID = expression ; .)
    ELSE            reduce using rule 28 (assignment -> ID = expression ; .)


state 124

    (29) choice_instr -> IF ( condition ) . instruction
    (30) choice_instr -> IF ( condition ) . instruction ELSE instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expr_list ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { anything_list }
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 7
    REPEAT          shift and go to state 16
    RETURN          shift and go to state 4
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 30
    {               shift and go to state 33
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    return_instr                   shift and go to state 9
    const                          shift and go to state 10
    assignment                     shift and go to state 18
    instruction                    shift and go to state 135
    compound_instr                 shift and go to state 20
    continue_instr                 shift and go to state 12
    labeled_instr                  shift and go to state 19
    print_instr                    shift and go to state 29
    choice_instr                   shift and go to state 5
    repeat_instr                   shift and go to state 8
    break_instr                    shift and go to state 26
    while_instr                    shift and go to state 13
    expression                     shift and go to state 34

state 125

    (31) choice_instr -> IF ( error ) . instruction
    (32) choice_instr -> IF ( error ) . instruction ELSE instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expr_list ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { anything_list }
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 7
    REPEAT          shift and go to state 16
    RETURN          shift and go to state 4
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 30
    {               shift and go to state 33
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    return_instr                   shift and go to state 9
    const                          shift and go to state 10
    assignment                     shift and go to state 18
    instruction                    shift and go to state 136
    compound_instr                 shift and go to state 20
    continue_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    print_instr                    shift and go to state 29
    choice_instr                   shift and go to state 5
    break_instr                    shift and go to state 26
    labeled_instr                  shift and go to state 19
    expression                     shift and go to state 34
    repeat_instr                   shift and go to state 8

state 126

    (11) inits -> inits , init .

    ;               reduce using rule 11 (inits -> inits , init .)
    ,               reduce using rule 11 (inits -> inits , init .)


state 127

    (73) args_list_or_empty -> args_list .
    (75) args_list -> args_list . , arg

    )               reduce using rule 73 (args_list_or_empty -> args_list .)
    ,               shift and go to state 137


state 128

    (72) fundef -> TYPE ID ( args_list_or_empty . ) compound_instr

    )               shift and go to state 138


state 129

    (76) args_list -> arg .

    ,               reduce using rule 76 (args_list -> arg .)
    )               reduce using rule 76 (args_list -> arg .)


state 130

    (77) arg -> TYPE . ID

    ID              shift and go to state 139


state 131

    (13) init -> ID = expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               reduce using rule 13 (init -> ID = expression .)
    ,               reduce using rule 13 (init -> ID = expression .)
    +               shift and go to state 64
    -               shift and go to state 66
    *               shift and go to state 65
    /               shift and go to state 67
    %               shift and go to state 60
    |               shift and go to state 74
    &               shift and go to state 61
    ^               shift and go to state 75
    AND             shift and go to state 57
    OR              shift and go to state 68
    SHL             shift and go to state 63
    SHR             shift and go to state 58
    EQ              shift and go to state 69
    NEQ             shift and go to state 73
    >               shift and go to state 70
    <               shift and go to state 62
    LE              shift and go to state 59
    GE              shift and go to state 71


state 132

    (33) while_instr -> WHILE ( condition ) instruction .

    TYPE            reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    error           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    ID              reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    IF              reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    REPEAT          reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    {               reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    (               reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    INTEGER         reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    FLOAT           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    STRING          reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    $end            reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    UNTIL           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    }               reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)


state 133

    (34) while_instr -> WHILE ( error ) instruction .

    TYPE            reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    error           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    PRINT           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    IF              reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    REPEAT          reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    (               reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    INTEGER         reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    FLOAT           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    STRING          reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    UNTIL           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    }               reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)


state 134

    (35) repeat_instr -> REPEAT anything_list UNTIL condition ; .

    UNTIL           reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    TYPE            reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    error           reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    PRINT           reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    ID              reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    IF              reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    WHILE           reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    REPEAT          reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    RETURN          reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    BREAK           reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    CONTINUE        reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    {               reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    (               reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    INTEGER         reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    FLOAT           reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    STRING          reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    $end            reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    }               reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)
    ELSE            reduce using rule 35 (repeat_instr -> REPEAT anything_list UNTIL condition ; .)


state 135

    (29) choice_instr -> IF ( condition ) instruction .
    (30) choice_instr -> IF ( condition ) instruction . ELSE instruction

    TYPE            reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    error           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    PRINT           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    ID              reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    IF              reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    WHILE           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    REPEAT          reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    RETURN          reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    BREAK           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    {               reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    (               reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    INTEGER         reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    FLOAT           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    STRING          reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    $end            reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    UNTIL           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    }               reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    ELSE            shift and go to state 140

  ! ELSE            [ reduce using rule 29 (choice_instr -> IF ( condition ) instruction .) ]


state 136

    (31) choice_instr -> IF ( error ) instruction .
    (32) choice_instr -> IF ( error ) instruction . ELSE instruction

    TYPE            reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    error           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    PRINT           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    ID              reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    IF              reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    REPEAT          reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    {               reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    (               reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    INTEGER         reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    FLOAT           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    STRING          reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    $end            reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    UNTIL           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    }               reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 141

  ! ELSE            [ reduce using rule 31 (choice_instr -> IF ( error ) instruction .) ]


state 137

    (75) args_list -> args_list , . arg
    (77) arg -> . TYPE ID

    TYPE            shift and go to state 130

    arg                            shift and go to state 142

state 138

    (72) fundef -> TYPE ID ( args_list_or_empty ) . compound_instr
    (39) compound_instr -> . { anything_list }

    {               shift and go to state 33

    compound_instr                 shift and go to state 143

state 139

    (77) arg -> TYPE ID .

    ,               reduce using rule 77 (arg -> TYPE ID .)
    )               reduce using rule 77 (arg -> TYPE ID .)


state 140

    (30) choice_instr -> IF ( condition ) instruction ELSE . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expr_list ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { anything_list }
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 7
    REPEAT          shift and go to state 16
    RETURN          shift and go to state 4
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 30
    {               shift and go to state 33
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    return_instr                   shift and go to state 9
    const                          shift and go to state 10
    assignment                     shift and go to state 18
    instruction                    shift and go to state 144
    compound_instr                 shift and go to state 20
    continue_instr                 shift and go to state 12
    labeled_instr                  shift and go to state 19
    print_instr                    shift and go to state 29
    choice_instr                   shift and go to state 5
    repeat_instr                   shift and go to state 8
    break_instr                    shift and go to state 26
    while_instr                    shift and go to state 13
    expression                     shift and go to state 34

state 141

    (32) choice_instr -> IF ( error ) instruction ELSE . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expr_list ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT anything_list UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { anything_list }
    (44) expression -> . ID
    (45) expression -> . const
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 6
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 7
    REPEAT          shift and go to state 16
    RETURN          shift and go to state 4
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 30
    {               shift and go to state 33
    (               shift and go to state 11
    INTEGER         shift and go to state 14
    FLOAT           shift and go to state 24
    STRING          shift and go to state 17

    return_instr                   shift and go to state 9
    const                          shift and go to state 10
    assignment                     shift and go to state 18
    instruction                    shift and go to state 145
    compound_instr                 shift and go to state 20
    continue_instr                 shift and go to state 12
    while_instr                    shift and go to state 13
    print_instr                    shift and go to state 29
    choice_instr                   shift and go to state 5
    break_instr                    shift and go to state 26
    labeled_instr                  shift and go to state 19
    expression                     shift and go to state 34
    repeat_instr                   shift and go to state 8

state 142

    (75) args_list -> args_list , arg .

    ,               reduce using rule 75 (args_list -> args_list , arg .)
    )               reduce using rule 75 (args_list -> args_list , arg .)


state 143

    (72) fundef -> TYPE ID ( args_list_or_empty ) compound_instr .

    TYPE            reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    error           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    PRINT           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    ID              reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    IF              reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    WHILE           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    REPEAT          reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    RETURN          reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    BREAK           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    CONTINUE        reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    {               reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    (               reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    INTEGER         reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    FLOAT           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    STRING          reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    $end            reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    }               reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    UNTIL           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)


state 144

    (30) choice_instr -> IF ( condition ) instruction ELSE instruction .

    TYPE            reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    error           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    REPEAT          reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    (               reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    INTEGER         reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    FLOAT           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    STRING          reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    UNTIL           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)


state 145

    (32) choice_instr -> IF ( error ) instruction ELSE instruction .

    TYPE            reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    error           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    PRINT           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    IF              reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    REPEAT          reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    (               reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    INTEGER         reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    FLOAT           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    STRING          reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    UNTIL           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    }               reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)

